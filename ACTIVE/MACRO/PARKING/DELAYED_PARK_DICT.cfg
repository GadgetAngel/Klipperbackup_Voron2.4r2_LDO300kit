#.................................................................................................................
# delayed_park_dict - No additional options / Usage: NONE
#
#   Parks nozzle at x y z using a feedrate of f ater 10 seconds that Klipper reaches the ready state
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _USER_VARIABLE]
# variable_respond.set_status_off_on_at_boot
#
#.................................................................................................................
# Required external macro(s) used by this macro set.
#
# _general_Debug
# LIGHTS_OFF
# PROGRESS_BAR_LEDS_OFF
# _CASELIGHT_OFF
# STATUS_OFF
# _WAIT_Start
# MOVE_BED_CENTER
# _CASELIGHT_ON 
# EXTENDED_PARK_DICT
# RESETRGB
# PROGRESS_BAR_LEDS_ON
# STATUS_READY
# MOVE_BED_CENTER
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://github.com/zellneralex/klipper_config/blob/master/park_macro.cfg#L1
#                 https://github.com/droans/klipper_extras/tree/v0.2/extended_macro     
#.................................................................................................................

[delayed_j2filter delayed_park_dict]
## in this example I am not using a custom jinj2 filter but I wanted to prove that the code works on a timer also
## you could just use [delayed_gcode delayed_park_dict] in this case since a custom python fuction call is not being used or
## a custom jinja2 filter call is not being used
gcode:
    _general_Debug msg="delayed_park_dict - entering"
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
   # turn off all the lights
   LIGHTS_OFF                                          ;turn off WLED lights - lights controlled by WLED servers (ESP32 chips)
   PROGRESS_BAR_LEDS_OFF                               ;turn off progress bar lights - lights controlled by Octopus Pro board's RGB port
   _CASELIGHT_OFF                                      ;turn off 24V White lights - lights controlled by Octopus Pro board's HE1 port
   STATUS_OFF                                          ;turn off Stealthburner LEDs - lights controlled by EBB36 board
   # The WAIT_Delayed macro is called by _WAIT_Start macro
   # only call it if the TinyFan PCB board is not yet transmitting its information
   {% if printer['temperature_sensor Q_TinyFan'].temperature <= 0.0 %}
       _WAIT_Start MINUTES=5.7 BOOT=1                      ;wait 5.7 minutes for TinyFan MCU to start sending data
   {% else %}
       #if _WAIT_START is not called we need to do the stuff in WAIT_Delayed macro for bootup to finish the bootup process
        {% set dict_string = {"x": 150.0, "y": 20.0, "z": 50.0, "f": 4000.0} %}
        EXTENDED_PARK_DICT LIT='{dict_string}'
        #{% set dict_string2 = {'x': 250, 'y': 50, 'z': 70, 'f': 4000} %}
        #EXTENDED_PARK_DICT DICT="{dict_string2}"
        # turn off all the lights
        RESETRGB                                            ;turn on WLED lights - lights controlled by WLED servers (ESP32 chips)
        PROGRESS_BAR_LEDS_ON                                ;turn on progress bar lights - lights controlled by Octopus Pro board's RGB port
        _CASELIGHT_ON                                       ;turn on 24V White lights - lights controlled by Octopus Pro board's HE1 port
        STATUS_READY                                        ;turn on Stealthburner LEDs - lights controlled by EBB36 board 
        MOVE_BED_CENTER
        {% if user.respond.set_status_off_on_at_boot %}     ;flag to see if STATUS_OFF should be run a bootup
            STATUS_OFF                                      ;turn off the lights
            _CASELIGHT_OFF                                  ;turn off 24V White lights - lights controlled by Octopus Pro board's HE1 port
        {% endif %}   
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET=0
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET=15 
        M117 "Chamber temperature set to 15&ordm;C"           
   {% endif %}   
   
   _general_Debug msg="delayed_park_dict - exiting"
 