#.................................................................................................................
# CLEAN_NOZZLE - No additional options / Usage: CLEAN_NOZZLE
#
#  nozzle scrubbing and purging routine
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _GLOBAL_VARS]
#  variable_bucket_pos
#
# [gcode_macro _USER_VARIABLE]
# variable_purge.location_bucket_rear'  
# variable_purge.enable_purge'          
# variable_purge.purge_len'             
# variable_purge.purge_spd'             
# variable_purge.purge_temp_min'        
# variable_purge.purge_ret'             
# variable_purge.ooze_dwell'            
# variable_purge.brush_top'            
# variable_purge.clearance_z'           
# variable_purge.wipe_qty'              
# variable_purge.prep_spd_xy'           
# variable_purge.prep_spd_z'           
# variable_purge.wipe_spd_xy'          
# variable_purge.brush_start'          
# variable_purge.brush_width'           
# variable_purge.brush_front'           
# variable_purge.brush_depth'          
# variable_purge.bucket_left_width'    
# variable_purge.bucket_right_width'   
# variable_purge.bucket_gap'            
# variable_purge.bucket_start'          
#
#.................................................................................................................
# Required external macro(s) used by this macro.
#
# _general_Debug
# M117
# _GLOBAL_VARS
# _USER_VARIABLE
# STATUS_CLEANING
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://github.com/VoronDesign/VoronUsers/tree/master/abandoned_mods/printer_mods/edwardyeeks/Decontaminator_Purge_Bucket_%26_Nozzle_Scrubber
#      
#.................................................................................................................

#######################################################################################################################################

# Sample macro config to be used in conjunction with the Decontaminator Purge Bucket & Nozzle Scrubber mod. Created by Hernsl 
# (hernsl#8860 on Discord) and edited by Edwardyeeks (edwardyeeks#6042 on Discord). Several ideas that made it as features by
# Deutherius (deutherius#3295 on Discord).

# The goal of this macro is to provide a nozzle scrubbing and purging routine that is easily copied/referenced into your  printer.cfg.
# Users can simply change parameters and enable/disable options in the first half. Descriptions are plentiful, making this macro
# look huge but informative and are laid out in sequence to be read first describing the line below; PLEASE READ CAREFULLY.

# This sample config assumes the following: The user has implemented the default decontaminator purge bucket & nozzle scrubber mod
# for the VORON 1/2. It can be tweaked to customised purge bucket geometries and brushes.

# Features in this macro: option of putting the bucket at the rear or front of the bed. Purge routine that can be enabled/disabled.
# By default, bucket is located at rear left of bed and purge routine is enabled. The purge and scrubbing routine is randomized
# in either left or right bucket to ensure as even as possible distribution of filament gunk.

# Default parameters are set for safe speeds and movements. Where necessary, tweak the parameters for the nozzle scrub procedure 
# to fit your printer.

# To avoid adding length of lines to your main printer.cfg config file, one can upload a config file separately into klipper and
# include it into the main printer config. Upload nozzle_scrub.cfg to the same directory as printer.cfg. Usually, it is in /home/pi/.
# Users of Fluidd, Mainsail and other klipper front ends would find it under /home/pi/klipper_config/.

# Once uploaded, add the following to your printer.cfg in the Macros section: [include /home/pi/nozzle_scrub.cfg] 
# Those running Fluidd, Mainsail and other front ends will need to use the following location instead:
# [include /home/pi/klipper_config/nozzle_scrub.cfg]

#######################################################################################################################################

# Name of the macro is clean_nozzle.

[gcode_macro clean_nozzle]
description: Helper: Decontaminator Purge Bucket & Nozzle Scrubber routine
gcode:
   _general_Debug msg="clean_nozzle - entering"
   {% set global = printer['gcode_macro _GLOBAL_VARS'] %}
   {% set user = printer['gcode_macro _USER_VARIABLE'] %}
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle
      
      ## set status LEDs
      STATUS_CLEANING
      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config.stepper_y.position_max|float %}

      ## Check if user enabled purge option or not.
      {% if user.purge.enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         G1 Z{user.purge.brush_top + user.purge.clearance_z} F{user.purge.prep_spd_z}

         ### Check if user chose to use rear location.
         {% if user.purge.location_bucket_rear %}
            G1 Y{Ry} F{user.purge.prep_spd_xy}
         {% else %}
            G1 Y{user.purge.brush_front + (user.purge.brush_depth / 2)} F{user.purge.prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{user.purge.bucket_start + (user.purge.bucket_left_width / (2 - global.bucket_pos)) + (global.bucket_pos * user.purge.bucket_gap) + (global.bucket_pos * (user.purge.bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= user.purge.purge_temp_min %}
            M83      ; relative mode
            G1 E{user.purge.purge_len} F{user.purge.purge_spd}
            G1 E-{user.purge.purge_ret} F{user.purge.purge_spd * 5}
            G4 P{user.purge.ooze_dwell * 1000}
            G92 E0   ; reset extruder
         {% endif %}

      {% endif %}
   
      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{user.purge.brush_top + user.purge.clearance_z} F{user.purge.prep_spd_z}
      G1 X{user.purge.brush_start + (user.purge.brush_width * global.bucket_pos)} F{user.purge.prep_spd_xy}

      ## Check if user chose to use rear location.
      {% if user.purge.location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{user.purge.brush_front + (user.purge.brush_depth / 2)}
      {% endif %}

      ## Move nozzle down into brush.
      G1 Z{user.purge.brush_top} F{user.purge.prep_spd_z}
   
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      {% for wipes in range(1, (user.purge.wipe_qty + 1)) %}
         G1 X{user.purge.brush_start + (user.purge.brush_width * (1 - global.bucket_pos))} F{user.purge.wipe_spd_xy}
         G1 X{user.purge.brush_start + (user.purge.brush_width * global.bucket_pos)} F{user.purge.wipe_spd_xy}
      {% endfor %}
   
      ## Clear from area.
      M117 Cleaned!
      G1 Z{user.purge.brush_top + user.purge.clearance_z} F{user.purge.prep_spd_z}
      G1 X{user.purge.bucket_start + (user.purge.bucket_left_width / 4)} F{user.purge.prep_spd_xy}      #bugfix for right side mounted buckets

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}
   _general_Debug msg="clean_nozzle - exiting"

