#.................................................................................................................
# SET_HEATER_TEMPERATURE  - required parameters: HEATER={"extruder"|"heater_bed"} TARGET={target_temperature}  / 
#
# Usage: 
# _SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
#  if the HEATER is the "extruder" is passes the TARGET temperature on to M104 S{TARGET} command
#  if the HEATER is the "heater_bed" and the TARTGET temperature is equal to or greater than variable_threshold in gcode_macro bedfansvars,
#     it sets the TARTGET temperature via M99140 S{TARGET} and triggers the bedfanloop macro
#  if the HEATER is the "heater_bed" and the TARTGET temperature is less than variable_threshold in gcode_macro bedfansvars,
#     it sets the TARTGET temperature via M99140 S{TARGET} and stops the bedfans from blowing and disables the bedfanloop macro
#
# This macro starts automatically when the heater_bed TARGET temperature is set.
# Overrides the Klipper command SET_HEATER_TEMPERATURE and renames it to "_SET_HEATER_TEMPERATURE".  This macro sets fan speeds to low and start monitoring the "bedfanloop" loop.
#
# This macro requires the following objects to be defined in the configuration of the printer object:
#    1.  a chamber temperature sensor to be defined:
#             replace all occurances of "J_Chamber_ZDragChain_PT100" with the name of your chamber temperature sensor in this file
#    2.  bed fans to be defined:
#             if you have two bed fans defined: replace all occurances of "Bedfan_Left" and "Bedfan_Right" with the names of the two bed fans you have defined
#             or
#             if you have only one bed fan defined: replace all occurances of "Bedfan_Left" with the name of the bed fan you have defined and remove "Bedfan_Right"
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _USER_VARIABLE]
# variable_filament.profile.defaultEnclosure
# variable_bedfanvars.threshold
#
# [gcode_macro _GLOBAL_VARS]
# variable_bedfanvars_lasttemp
# variable_bedfanvars_flag
#
# [temperature_sensor J_Chamber_ZDragChain_PT100]   - must be defined 
#
#.................................................................................................................
# Required external macro(s) used by this macro.
#
#  _general_Debug
#   bedfanloop
#  _USER_VARIABLE
#  _BedFansSlow
#  _BedFansOff
#  _GLOBAL_VARS
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://voronregistry.com/mods/ellis-bedfans
#                 https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans/Klipper_Macros
#      
#.................................................................................................................

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
description: Helper: BEDFAN macro; set fan speeds to low and start monitoring the bed fans
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    _general_Debug msg="SET_HEATER_TEMPERATURE - entering"
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set global = printer['gcode_macro _GLOBAL_VARS'] %}
    {% set bedfanvars = global.bedfanvars %}
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = user.bedfanvars.threshold|int %}
    {% set CURRENT_CHAMBERTEMP = printer["temperature_sensor J_Chamber_ZDragChain_PT100"].temperature|float %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}  
            # check to see if M141 was called to set the temperature target for the exhaust fan
            {% set CHAMBERFAN_TARTGET_TEMP = printer["temperature_fan chamber"].target|float %}                 ;current chamberfan target temperature
            {% set CHAMBER_THERSHOLD = user.filament.profile.defaultEnclosure|float %}                          ;desired temperature for chamber
            {% if CHAMBERFAN_TARTGET_TEMP < CHAMBER_THERSHOLD %}
                # chamberfan target temp has not been set by the PRINT_START routine, must have started the bed up for testing purposes
                # automatically set the chamberfan target temperature in this case to the defaultenclosure value
                M141 S{CHAMBER_THERSHOLD}                                                                    ;set chamber temperature for Exhaust fan and Bed fans
            {% endif %}
			_BedFansSlow
            {% set _dummy = bedfanvars.update({'lasttemp':CURRENT_CHAMBERTEMP}) %}
            {% set _dummy = bedfanvars.update({'flag':0}) %}
            SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=bedfanvars VALUE="{bedfanvars}"
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
		{% else %}
			_BedFansOff
            {% set _dummy = bedfanvars.update({'lasttemp':CURRENT_CHAMBERTEMP}) %}
            {% set _dummy = bedfanvars.update({'flag':0}) %}
            SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=bedfanvars VALUE="{bedfanvars}"
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0                                                       #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
    _general_Debug msg="SET_HEATER_TEMPERATURE -exiting"
