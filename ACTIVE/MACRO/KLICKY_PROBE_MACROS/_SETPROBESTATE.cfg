#.................................................................................................................
# _SETPROBESTATE - required parameters: ACTION{query,dock,attach} / Usage: _SETPROBESTATE ACTION={query,dock,attach}
#
# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _Probe_Variables]
#  variable_probe_attached
#  variable_probe_state
#
#.................................................................................................................
# Required external macro(s) used by this macro.
#
## ---NONE---
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://github.com/jlas1/Klicky-Probe/tree/main/Klipper_macros
#      
#.................................................................................................................

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}
    
    