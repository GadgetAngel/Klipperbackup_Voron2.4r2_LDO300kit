#.................................................................................................................
# BED_MESH_CALIBRATE - required parameters: PRINT_MIN={params.PRINT_MIN}, PRINT_MAX={params.PRINT_MAX}, FORCE_NEW_MESH={True,False}
#
#   / Usage: BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} or
#            BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} FORCE_NEW_MESH=True
#
#  This macro uses a "Print Area Bed Mesh". This macro uses a miniumal area for the bed mesh based
#   on the size of the current G-code file that needs to be printed.
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _USER_VARIABLE]
#  variable_klicky.verbose
#  variable_hw.mag_probe.euclid
#  variable_hw.mag_probe.ena
#
# [gcode_macro _GLOBAL_VARS]
#  variable_bed_mesh
#  variable_bed_mesh.buffer
#  variable_bed_mesh.last_area_start_x
#  variable_bed_mesh.last_area_start_y
#  variable_bed_mesh.last_area_end_x
#  variable_bed_mesh.last_area_end_y
#
# [gcode_macro _Probe_Variables] if it is defined in printer.cfg file
#
# [gcode_macro status_meshing] if it is defined in printer.cfg file
#
# [gcode_macro status_ready] if it is defined in printer.cfg file
#
# [bed_mesh] - section must be defined
#
#.................................................................................................................
# Required external macro(s) used by this macro.
#
# _general_Debug
# _CheckProbe
# Attach_Probe
# STATUS_MESHING
# STATUS_READY
# Dock_Probe
# _USER_VARIABLE
# _CG28
# BED_MESH_CLEAR
# _Probe_Variables
# _GLOBAL_VARS
# QUAD_GANTRY_LEVEL
# ATTACH_PROBE
# DOCK_PROBE
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://github.com/Turge08/print_area_bed_mesh
##                https://github.com/zellneralex/klipper_config/blob/master/bed_mesh.cfg#L67
#      
#.................................................................................................................

#####################################################################
#  Macros
#####################################################################
#
# Warning: If you use the flexplate names insight your stored mesh's than:
#  - insure that it does not contain spaces
#  - insure that it does not contain special charakters
#  - insure that it does not contain german "umlaut" (äöü and ß)
#
# All macros are writen in the way that they will work without a [save_variables]
# block and also without the flexplate.cfg
#
#####################################################################

[gcode_macro BED_MESH_CALIBRATE]
# print surface bed mesh calibrate
# Works with Klicky Probe/MagProbe on Voron
# January 7, 2023
# Steve Turgeon & GadgetAngel

description: Helper: Perform Mesh Bed Leveling with Klicky Probe or MagProbe automount probes
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    _general_Debug msg="BED_MESH_CALIBRATE - entering"
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set global = printer['gcode_macro _GLOBAL_VARS'] %}
    {% set bed_mesh = global.bed_mesh %}
    
    {% set buffer = global.bed_mesh.buffer %}
    {% set last_area_start_x = global.bed_mesh.last_area_start_x %}
    {% set last_area_start_y = global.bed_mesh.last_area_start_y %}
    {% set last_area_end_x = global.bed_mesh.last_area_end_x %}
    {% set last_area_end_y = global.bed_mesh.last_area_end_y %}
    
    {% if params.FORCE_NEW_MESH != null %}
        { action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
    {% endif %}
    {% if printer.bed_mesh.profile_name == '' %}
        { action_respond_info("No existing bed mesh found.") }
        {% set last_area_end_x=-1 %}
    {% endif %}

    _CG28
    {% if user.hw.mag_probe.ena %} BED_MESH_CLEAR {% endif %}

    {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
    {% set euclid_available = user.hw.mag_probe.euclid %}
    
    {% if klicky_available %}
        {% set V = user.klicky.verbose %}
        {% if V %}
            { action_respond_info("Bed Mesh Calibrate") }
        {% endif %}
    {% endif %}
    {% if params.PRINT_MIN %}
        { action_respond_info("print_min: %s" % params.PRINT_MIN) }
        { action_respond_info("print_max: %s" % params.PRINT_MAX) }
        
        {% set blTouchConfig = printer.configfile.config.bltouch %}
        {% if blTouchConfig %}
            {% set OffsetX = blTouchConfig.x_offset|default(0)|float %}
            {% set OffsetY = blTouchConfig.y_offset|default(0)|float %}
        {% endif %}
        
        {% set probeConfig = printer.configfile.config.probe %}
        {% if probeConfig %}
            {% set OffsetX = probeConfig.x_offset|default(0)|float %}
            {% set OffsetY = probeConfig.y_offset|default(0)|float %}
        {% endif %}

        {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
        {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
        {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
        {% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

        {% if last_area_start_x > 0 %}
            { action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
        {% endif %}

        {% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
            {% if klicky_available %}
                _CheckProbe action=query
                Attach_Probe
            {% elif euclid_available %}
                {% if not printer.quad_gantry_level.applied %} QUAD_GANTRY_LEVEL PARK=false {% endif %}
                ATTACH_PROBE 
            {% endif %}
            
            {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

                # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
                {% set bedMeshConfig = printer.configfile.config.bed_mesh %}
                {% set minimum_probe_count = 3 %}
                {% if bedMeshConfig.algorithm == "bicubic" %}
                    {% set minimum_probe_count = 5 %}
                {% endif %}
                {% set probe_count = bedMeshConfig.probe_count.split(",") %}
                {% set probe_count_x = probe_count[0]|int %}
                {% if probe_count.__len__() > 1 %}
                    {% set probe_count_y = probe_count[1]|int %}
                {% else %}
                    {% set probe_count_y = probe_count_x|int %}
                {% endif %}
                {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
                {% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
                {% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
                {% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
                {% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

                # If print area X is smaller than 50% of the bed size, change to to 3 probe counts for X instead of the default 
                {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
                    {% set probe_count_x = minimum_probe_count %}
                {% endif %}

                # If print area Y is smaller than 50% of the bed size, change to to 3 probe counts for Y instead of the default 
                {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
                    {% set probe_count_y = minimum_probe_count %}
                {% endif %}

                {% if print_min_x - buffer >= mesh_min_x %}
                    {% set mesh_min_x = print_min_x - buffer %}
                {% endif %}

                {% if print_min_y - buffer >= mesh_min_y %}
                    {% set mesh_min_y = print_min_y - buffer %}
                {% endif %}

                {% if print_max_x + buffer <= mesh_max_x %}
                    {% set mesh_max_x = print_max_x + buffer %}
                {% endif %}

                {% if print_max_y + buffer <= mesh_max_y %}
                    {% set mesh_max_y = print_max_y + buffer %}
                {% endif %}

                { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
                { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
                { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

                ; Set variables so they're available outside of macro
                {% set _dummy = bed_mesh.update({'last_area_start_x':print_min_x }) %}
                {% set _dummy = bed_mesh.update({'last_area_start_y':print_min_y}) %}        
                {% set _dummy = bed_mesh.update({'last_area_end_x':print_max_x }) %}
                {% set _dummy = bed_mesh.update({'last_area_end_y':print_max_y}) %}        
                SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=bed_mesh VALUE="{bed_mesh}"                      


                {% if printer["gcode_macro status_meshing"] != null %}
                    STATUS_MESHING
                {% endif %}

                {% if relative_reference_index == 0 or relative_reference_index == null %}
                    BED_MESH_CALIBRATE_BASE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
                {% else %}
                    {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
                    { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
                    BED_MESH_CALIBRATE_BASE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
                {% endif %}
            {% else %}
                {% if printer["gcode_macro status_meshing"] != null %}
                    STATUS_MESHING
                {% endif %}
                BED_MESH_CALIBRATE_BASE
            {% endif %}
            {% if klicky_available %}
                Dock_Probe
            {% elif euclid_available %}
                DOCK_PROBE
            {% endif %}
        {% else %}
            { action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
        {% endif %}
    {% else %}
        {% if klicky_available %}
            _CheckProbe action=query
            Attach_Probe
        {% elif euclid_available %}
            {% if not printer.quad_gantry_level.applied %} QUAD_GANTRY_LEVEL PARK=false {% endif %}
             ATTACH_PROBE 
        {% endif %}
        {% if printer["gcode_macro status_meshing"] != null %}
            STATUS_MESHING
        {% endif %}
        BED_MESH_CALIBRATE_BASE
        {% if klicky_available %}
            Dock_Probe
        {% elif euclid_available %}
            DOCK_PROBE
        {% endif %}
    {% endif %}
    {% if printer["gcode_macro status_ready"] != null %}
        STATUS_READY
    {% endif %}
    _general_Debug msg="BED_MESH_CALIBRATE - exiting"

