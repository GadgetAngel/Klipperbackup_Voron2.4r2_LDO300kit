#.................................................................................................................
# PRINT_START - optional parameters:
#
#   PRINT_START EXTRUDER_TEMP={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} 
#               BED_TEMP=[first_layer_bed_temperature] 
#               CHAMBER_TEMP=[chamber_temperature] 
#               DELTA_C={delta_chamber_temperature}
#               DELTA_B={delta_bed_temperature}
#               PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} 
#               PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}
#               LAYER_HEIGHT={layer_hieght}
#               SOAK={Soak_time_in_minutes}
#               CHAMBER_SOAK={Extra_Soak_time_if_Chamber_is_not_on_target}
#               Z_ADJUST={Add_extra_z_offset_via_slicer}
#               FILTER={1,0}
#
#
# / Usage:
#          PRINT_START EXTRUDER_TEMP={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} 
#                      BED_TEMP=[first_layer_bed_temperature] 
#                      CHAMBER_TEMP=[chamber_temperature] 
#                      DELTA_C=2
#                      DELTA_B=5
#                      PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} 
#                      PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]} 
#                      LAYER_HEIGHT=[layer_height] 
#                      SOAK=30 
#                      CHAMBER_SOAK=10
#                      FILTER=1
#
#   Description: This is the PRINT_START Macro; All cmds needed at print start
#
#.................................................................................................................

#.................................................................................................................
# -SuperSlicer's start print gcode should contain the following:  
#   M140 S0 ; needed so prusaslicer/superslicer doesn't add unneeded "wait for temps" by itself
#   M104 S0 ; needed so prusaslicer/superslicer doesn't add unneeded "wait for temps" by itself
#   PRINT_START EXTRUDER_TEMP={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} 
#       BED_TEMP=[first_layer_bed_temperature] 
#       CHAMBER_TEMP=[chamber_temperature] 
#       DELTA_C=2
#       DELTA_B=5
#       PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} 
#       PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]} 
#       LAYER_HEIGHT=[layer_height] 
#       SOAK=30 
#       CHAMBER_SOAK=10
#       FILTER=1
#   CHECK_QGL ; will detach probe and cancel print in case of an failing QGL
#   PRESSURE_ADVANCE_SELECT NOZZLE=[nozzle_diameter] FILAMENT=[filament_settings_id]
#
## PrusaSlicer/SuperSlicer:
## Add at the start gcode section
## _LAYER TOTAL=[total_layer_count] RESPOND=0
##
## Add at the layer change gcode section
## _LAYER CURRENT={layer_num+1}
#
# -SuperSlicer's end print gcode should contain the following:
#   Use PRINT_END for the slicer ending script
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _USER_VARIABLE]
#  variable_hw.auto_z_offset.auto
#  variable_hw.auto_z_offset.manu
#  variable_hw.caselight.ena
#  variable_hw.chamber.ena
#  variable_hw.chamber.fan
#  variable_hw.chamber.type
#  variable_hw.display.ena
#  variable_hw.endstop_temp.ena
#  variable_hw.filter.ena
#  variable_hw.relay.ena
#  variable_hw.runout.sensor
#  variable_hw.runout.type
#  variable_park.bed.x
#  variable_park.bed.y
#  variable_park.bed.z
#  variable_prime.pos.z  
#  variable_print_start.bed_up 
#  variable_print_start.ival
#  variable_print_start.prime_mult
#  variable_print_start.time.extruder
#  variable_print_start.time.bed
#  variable_speed.travel
#  variable_speed.z_hop
#  variable_var
#  variable_var.temp.extruder
#  variable_var.temp.bed
#  variable_var.temp.chamber
#  variable_var.temp.endstop
#  variable_var.delta.chamber
#  variable_var.delta.bed
#  variable_var.time.soak
#  variable_var.time.soak_extra
#  variable_var.redo_qgl
#  variable_var.prime_height
#  variable_var.z_adjust
#  variable_var.filter
#  variable_filament.profile.MeshToApply
#  variable_filament.profile.defaultTempNozzle
#  variable_filament.profile.defaultWarmNozzle
#  variable_filament.profile.defaultReadyNozzle
#  variable_filament.profile.PrePrintSoakMinutes
#  variable_filament.profile.defaultEnclosure
#  variable_filament.profile.purgeRetract
#  variable_filament.profile.defaultTempBed
#
# [gcode_macro _GLOBAL_VARS]
# variable_state
# variable_execute
# variable__home_z
# variable__home_z.calibrate_z_next
#
# [filament_motion_sensor runout] or [filament_switch_sensor runout] - must be defined in printer.cfg file
#
#.................................................................................................................
# Required external macro(s) used by this macro set.
#
# _general_Debug
# _USER_VARIABLE
# _GLOBAL_VARS
# _HEATER_ON
# _CASELIGHT_ON
# _LCD_KNOB
# M141
# _FILTER_ON
# _CG28
# G0
# _START_PRINT_WAIT
# M117
# _PRINT_AR
# M140
# M190
# M106
# _RUNOUT_INFO
# CANCEL_PRINT
# G34
# NOZZLECLEAN
# G28 Z (homiing_override)
# CALIBRATE_Z
# _SET_PLATE_OFFSET
# _PRINT_OFFSET
# PRIME_LINE
# _CLEAR_DISPLAY
# CURRENT_HIGH
# SET_NOZZLE_LEDS_OFF
# ENABLEFILAMENTSENSOR
# STATUS_HEATING
# G28 Z (homing_override)
# BED_MESH_CALIBRATE
# STATUS_PRINTING
#
#.................................................................................................................

#.................................................................................................................
#
# URL Resources: https://github.com/zellneralex/klipper_config/blob/master/macro.cfg#L16
#                 https://gist.github.com/conlank/7904ba9529a27b03d707d3a6417877df#recommended-print-start
#     
#.................................................................................................................

##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
##  LAYER_HEIGHT  : Hieght of prime_line should be set to layer_hieght
##  Z_ADJUST      : Add extra z offset via slicer
##  FILTER        : Activate Nevermore 1 for On; 0 for Off; default is On

[gcode_macro PRINT_START]
description: Helper: All cmds needed at print start
# variable_var: {'temp'        : {'extruder': 245.0, 'bed': 100.0, 'chamber': 40.0, 'endstop': 0.0},
               # 'delta'       : {'chamber': 5.0, 'bed': 10},
               # 'time'        : {'soak' : 1800, 'soak_extra': 900},
               # 'redo_qgl'    : True,
               # 'prime_height': 0.0,
               # 'z_adjust'    : 0.0,
               # 'filter'      : True}
               
## Valid state 
##   Prepare    : Store Params
##   HeatBed    : heat up bed and decide if soak is needed 
##   HeatSoak   : loop the time specified with SOAK
##   Chamber    : decide if extra soak is needed
##   ChamberSoak: loop the time specified with EXTRA_SOAK or Chamber target reached
##   Final      : all what needs to be done after wait time

# variable_state: 'Prepare'
gcode:
   _general_Debug msg="PRINT_START - entering"
  {% set global      = printer['gcode_macro _GLOBAL_VARS'] %}
  {% set user        = printer['gcode_macro _USER_VARIABLE'] %}
  {% set MeshToApply = user.filament.profile.MeshToApply|default() %}
  {% set var         = user.var %}
  
  {% set actBed = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
             else printer.heater_bed.temperature|float|round(1) %} ; get actual temp from extra sensor or heater sensor
  ##############################  Prepare phase only done at the first exection of PRINT_START  ##############################
  {% if global.state == 'Prepare' %}
  
    {% set defaultTN = user.filament.profile.defaultTempNozzle|float %}  
    {% set defaultWN = user.filament.profile.defaultWarmNozzle|float %}
    {% set defaultRN = user.filament.profile.defaultReadyNozzle|float %}
    {% set defaultSOAK = user.filament.profile.PrePrintSoakMinutes|float %}
    {% set defaultENCLOSURE = user.filament.profile.defaultEnclosure|float %}
    {% set purgeRetract = user.filament.profile.purgeRetract|float %}
    {% set defaultTB = user.filament.profile.defaultTempBed|float %}
    
    #############  Store input parameters  #############
    {% set var = {'temp': {'extruder': params.EXTRUDER_TEMP|default(defaultTN)|float|round(1),
                           'bed'     : params.BED_TEMP|default(defaultTB)|float|round(1),
                           'chamber' : params.CHAMBER_TEMP|default(defaultENCLOSURE)|float|round(1),
                           'endstop' : 0.0},
                  'delta': {'chamber': params.DELTA_C|default(defaultTN-defaultRN)|float|round(1), 
                            'bed'    : params.DELTA_B|default(5)|float|round(1)},
                  'time' : {'soak'      : params.SOAK|default(defaultSOAK)|int,
                            'soak_extra': params.CHAMBER_SOAK|default(15)|int * 60 if params.EXTRA_SOAK|default('true') in ['true', '1', 'True', true, 1, True] and 
                                                                                      user.hw.chamber.ena 
                                          else 0},
               'redo_qgl'    : True if user.filament.profile.QGLbeforeSoakPrint in ['true', '1', 'True', true, 1, True]
                          else False,
               'prime_height': params.LAYER_HEIGHT|float * user.print_start.prime_mult|float if LAYER_HEIGHT in params
                          else user.prime.pos.z|float,
               'z_adjust'    : params.Z_ADJUST|default(0.0)|float,
               'filter'      : False if params.FILTER|default(1)|int == 0 else True} %}

    SET_NOZZLE_LEDS_OFF
    SET_LED LED=sb_leds INDEX=17 RED=.2 GREEN=.2 BLUE=1
    SET_LED LED=sb_leds INDEX=18 RED=.2 GREEN=.2 BLUE=1
    M118 gCode file passed the following to PRINT_START:
    M118 { rawparams }
    {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
    {% if user.hw.caselight.ena %} _CASELIGHT_ON {% endif %}             ; switch on light
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED BLINK=1 {% endif %}
    {% if user.hw.chamber.fan %} M141 S0  {% endif %}                    ; exhaust fan off
    {% if user.hw.filter.ena and var.filter %} _FILTER_ON {% endif %}    ; activate filter
    _CG28                                                                ; home if needed
    G90                                                                  ; absolute position
    G0 Z{user.park.bed.z} F{user.speed.z_hop}                            ; move nozzle to z high first
    G0 X{user.park.bed.x} Y{user.park.bed.y} F{user.speed.travel}        ; home to get toolhead in the middle
    ENABLEFILAMENTSENSOR
    PAUSE_BASE
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=var VALUE="{var}"
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=execute VALUE=False
    #SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"HeatBed"'
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatBed"'
    UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
  ##############################  HeatBed Phase heat up the bed  ##############################    
  {% elif global.state == 'HeatBed' %}
	STATUS_HEATING
    SET_NOZZLE_LEDS_OFF
    SET_LED LED=sb_leds INDEX=18 RED=1 GREEN=0 BLUE=0
    SET_LED LED=sb_leds INDEX=17 RED=.5 GREEN=.5 BLUE=.5
    # get max allow bed temp from config. Lower it by 5C to avoid shutdown
    {% set cfg_bed_max = printer.configfile.settings.heater_bed.max_temp|float|round(1) - 5.0 %}
    {% set targetBed = var.temp.bed - var.delta.bed %}
    {% set soakBed = [(var.temp.bed + user.print_start.bed_up), cfg_bed_max]|min %}
    {% if (var.time.soak <= 0) or (actBed >= targetBed) %}  ; check if soak time is 0 or if the bed is still hot
      M117 Heating Extruder
      {% set text = 'heat soak disabled' if var.time.soak <= 0 else 'heat soak not needed' %}
      # to display the degree symbol, one has to use the HTML sequence "&ordm;"
      _PRINT_AR T="{"Bed temp: act %3.1f&ordm;C min %3.1f&ordm;C (target(%3.1f&ordm;C) - delta(%2.1f&ordm;C)) %s" % 
                    (actBed,targetBed,var.temp.bed,var.delta.bed,text)}"
      {% set _dummy = var.update({'redo_qgl' : False}) %}
      M140 S{var.temp.bed}      ; heat bed
      M109 S{var.temp.extruder} ; heat extruder and wait
      M190 S{var.temp.bed}      ; heat bed and wait
      SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"Chamber"'
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      M117 Heating Bed
      # to display the degree symbol, one has to use the HTML sequence "&ordm;"
      _PRINT_AR T="{"Bed temp: act %3.1f&ordm;C min %3.1f&ordm;C (target(%3.1f&ordm;C) - delta(%2.1f&ordm;C)) heat soak needed" % 
                   (actBed,targetBed,var.temp.bed,var.delta.bed)}"
      _PRINT_AR T="{"Set Bed temp to %3.1f&ordm;C instead of %3.1f&ordm;C for faster heat soak" % (soakBed,var.temp.bed)}"    
      M106 S90              ; switch part cooling ~35% to move air in chamber
      M140 S{soakBed}       ; heat bed
      SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"HeatSoak"'
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
      {% set next_duration = user.print_start.ival if var.time.soak > user.print_start.ival else var.time.soak %}
      {% set _dummy = var.time.update({'soak': var.time.soak - user.print_start.ival}) if var.time.soak > user.print_start.ival 
                 else var.time.update({'soak': 0}) %}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% endif%}
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=var VALUE="{var}"
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    _RUNOUT_INFO    
  ##############################  Heatsoak Phase call the delay macro until time is over  ##############################
  {% elif global.state == 'HeatSoak' %}
	STATUS_HEATING
    SET_NOZZLE_LEDS_OFF
    SET_LED LED=sb_leds INDEX=18 RED=1 GREEN=0 BLUE=0
    SET_LED LED=sb_leds INDEX=17 RED=.5 GREEN=.5 BLUE=.5
    #############  Get filament runout info  #############
    {% if user.hw.runout.sensor %}
      {% if printer["filament_" + user.hw.runout.type + "_sensor runout"].enabled in ['true', '1', 'True', true, 1, True] %}
        {% set filament_detected = printer["filament_" + user.hw.runout.type + "_sensor runout"].filament_detected %}
      {% elif 'filament_loaded' in printer.save_variables.variables %}
        {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% else %}
        {% set filament_detected = True %}
      {% endif %}
    {% elif user.hw.runout.type == 'file' %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = True %}
    {% endif %}
    {% if filament_detected %}
      {% if var.time.soak <= (user.print_start.time.extruder + var.temp.extruder - 240) and 
             var.temp.extruder != printer.extruder.target %} ; check time to start heating extruder
        M104 S{var.temp.extruder} ; heat extruder
      {% endif %}
      {% if var.time.soak <= user.print_start.time.bed and var.temp.bed != printer.heater_bed.target|int %}  ; check time to reduce bed temp
      #{% if var.time.soak <= user.print_start.time.bed and bed != printer.heater_bed.target|int %}  ; check time to reduce bed temp
        M140 S{var.temp.bed} ; heat bed
      {% endif %}
      {% if var.time.soak > 0 %} ; check remaining time
        {% set next_duration = var.time.soak if user.print_start.ival >= var.time.soak else user.print_start.ival %}
        {% set _dummy = var.time.update({'soak': 0}) if user.print_start.ival >= var.time.soak 
                   else var.time.update({'soak': var.time.soak - user.print_start.ival}) %}}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
      {% else %}
        SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"Chamber"'
        #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
        # to display the degree symbol, one has to use the HTML sequence "&ordm;"
        _PRINT_AR T="{"Bed act temp=%3.1f&ordm;C heat soak done" % (actBed)}"
      {% endif%}
      SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=var VALUE="{var}"
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% else %}
      _PRINT_AR T="No Filament loaded, print aborded!"
      CANCEL_PRINT PARK=1 ERROR=1
    {% endif %}
  ##############################  Decide if extended soaking is needed  ##############################
  {% elif global.state == 'Chamber' %}
	STATUS_HEATING
    SET_NOZZLE_LEDS_OFF
    SET_LED LED=sb_leds INDEX=18 RED=1 GREEN=0 BLUE=0
    SET_LED LED=sb_leds INDEX=17 RED=.5 GREEN=.5 BLUE=.5  
  
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %}
      # to display the degree symbol, one has to use the HTML sequence "&ordm;"
      _PRINT_AR T="{"Chamber temp: act %2.1f&ordm;C min %2.1f&ordm;C (target(%2.1f&ordm;C) - delta(%2.1f&ordm;C)) extra heat soak needed" %
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber)}"
      SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"ChamberSoak"'
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"ChamberSoak"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      {% set text = 'extra heat soak disabled' if var.time.soak_extra <= 0 else 'extra heat soak not needed' %}
      # to display the degree symbol, one has to use the HTML sequence "&ordm;"
      _PRINT_AR T="{"Chamber temp: act %2.1f&ordm;C min %2.1f&ordm;C (target(%2.1f&ordm;C) - delta(%2.1f&ordm;C)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"Final"'
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5  
    {% endif %}
  ############################## extra Heat Soak terminated by chamber temp  ##############################
  {% elif global.state == 'ChamberSoak' %}    
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %} ; check remaining time and temp difference
      {% set next_duration = var.time.soak_extra if user.print_start.ival >= var.time.soak_extra else user.print_start.ival %}
      {% set _dummy = var.time.update({'soak_extra': 0}) if user.print_start.ival >= var.time.soak_extra
                 else var.time.update({'soak_extra': var.time.soak_extra - user.print_start.ival}) %}}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% else %}
      {% set text = 'extra heat soak timed out' if var.time.soak_extra == 0 else 'chamber temp reached' %}
      # to display the degree symbol, one has to use the HTML sequence "&ordm;"
      _PRINT_AR T="{"Chamber temp: act %2.1f&ordm;C min %2.1f&ordm;C (target(%2.1f&ordm;C) - delta(%2.1f&ordm;C)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"Final"'
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=var VALUE="{var}"
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
  ##############################  all whats need to run at the end  ##############################
  {% elif global.state == 'Final' %}
    RESUME_BASE
    SET_NOZZLE_LEDS_OFF
    SET_LED LED=sb_leds INDEX=17 RED=.5 GREEN=0 BLUE=.5
    SET_LED LED=sb_leds INDEX=18 RED=.5 GREEN=0 BLUE=.5       
    SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=state VALUE='"Prepare"' ; set state for next print    
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"' ; set state for next print    
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED  {% endif %}
    M106 S0                                                               ; turn off part cooling fan
    SET_NOZZLE_LEDS_OFF
    CURRENT_HIGH
    G34                                                                   ; home & QGL
    {% if user.hw.chamber.fan %} M141 S{var.temp.chamber} {% endif %}     ; set target temp for exhaust fan
    NOZZLECLEAN
    {% set _home_z = global._home_z %}
    {% set _dummy = _home_z.update({'calibrate_z_next':user.hw.auto_z_offset.auto}) %}        
    SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=_home_z VALUE="{_home_z}"    
    #SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=calibrate_z_next VALUE={user.hw.auto_z_offset.auto}
    G28 Z
    {% if user.hw.auto_z_offset.auto %} CALIBRATE_Z {% endif %}
    {% if user.hw.auto_z_offset.manu %} _SET_PLATE_OFFSET {% endif %}
    #you can use PRINT_START Z_ADJUST=0.0 in your Slicer. This does not reset the offset set by the calibration but adjusts it by the given value!
    # URL: https://github.com/protoloft/klipper_z_calibration#how-to-use-it
    SET_GCODE_OFFSET Z_ADJUST={var.z_adjust} MOVE=1
    _PRINT_OFFSET
    #BED_MESH_PROFILE LOAD=default                                                          #load saved mesh *or*
    #BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}           #generate new mesh
    #Dock_Probe                                                                             #removes probe lock 
    {% if MeshToApply != "NONE" %}
        {% if MeshToApply == "INSITU" %}
           BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX} 
           BED_MESH_PROFILE SAVE=INSITU
        {% elif MeshToApply == "DEFAULT" %}
           BED_MESH_PROFILE LOAD=default
        {% else %}
           BED_MESH_PROFILE LOAD={MeshToApply}
        {% endif %}
        M118 Applied {MeshToApply} mesh, post sampling.
    {% endif %}
    M118 Commencing print.
    SET_NOZZLE_LEDS_OFF
    SET_LED LED=sb_leds INDEX=18 RED=.5 GREEN=.5 BLUE=.5
    SET_LED LED=sb_leds INDEX=17 RED=.5 GREEN=.5 BLUE=.5
    STATUS_PRINTING
    #_FILAMENT_READY                                                  ;Performs filament specific purgeline and readies for print
    PRIME_LINE PRIME_HEIGHT={var.prime_height}
    {% if user.hw.endstop_temp.ena %}
      {% set _dummy = var.temp.update({'endstop': printer['temperature_sensor endstop'].temperature}) %}
      SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=var VALUE="{var}"
      #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% endif %}
    G21                                                 ; set units to millimeters
    G90                                                 ; use absolute coordinates
    M83                                                 ; use relative distances for extrusion
    {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1 {% endif %}
  {% endif %}    
   _general_Debug msg="PRINT_START - exiting"
