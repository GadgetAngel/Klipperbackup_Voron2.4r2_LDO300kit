# SEARCH_PRINTER_OBJECTS combines a mutlitple of different methods into one macro routine:
#    SEARCH_PRINTER_OBJECTS performs the same job as DUMP_VARIABLES macro from AndrewEllis93's Print-Tuning-Guide at https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/dump_variables.html
#    SEARCH_PRINTER_OBJECTS performs the same job as DUMP_PARAMETER macro form zellneralex at https://github.com/zellneralex/klipper_config/blob/master/debug_macro.cfg
#    SEARCH_PRINTER_OBJECTS performs the same job as SEARCH_GCODE_ROUTINES macro from GadgetAngel published on Voron Discord at https://discord.com/channels/460117602945990666/1024487409129373796/1049832743334314064
#    SEARCH_PRINTER_OBJECTS performs the same job as GET_VARIABLE macro from FatalBulletHit published on https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/get_variable.html#get-variable  
#    SEARCH_PRINTER_OBJECTS performs the same job as SEARCH_VARS macro from Mental published at https://klipper.discourse.group/t/example-search-printer-objects/164
#
#  SEARCH_PRINTER_OBJECTS will not crash your printer and will display a message indicating it did not find a match for your search.
#.................................................................................................................
# SEARCH_PRINTER_OBJECTS - optional parameters: 
#    (parameter appears by itself) ................................ P=('parameter_group') - search in printer[*] -> Filter results based on the name of the first key (only show varables with exact matches to this string)
#    (parameter appears by itself) ................................ C=('name_of_item_in_config') - search in printer[configfile].config.{C} -> Filter results based on name (only show varables with exact matches to this string)
#    (parameter appears by itself) ................................ S=('name_of_item_in_settings') - search in printer[configfile].settings.{S} -> Filter results based on name (nly show varables with exact matches to this string)
#    (parameter can appear by itself or only with VALUE parameter)..NAME=('string') - search in printer[NAME] or print[*].NAME -> Filter results based on name (only show varables with names containing this string)
#    (parameter can appear by itself or only with NAME parameter)...VALUE=('string') - search in printer[*][*].VALUE -> Filter results based on value (only show values containing this value) 
#    (parameter can only appear with NAME or VALUE parameters)......SHOW_CFG=(integer, 0,1)- it will allow the printer[configfile] section to be searched and if matches found those results in printer[configfile].config and printer[coonfigfile].settings will be inclued in the printed out.
#    (parameter appears by itself) ................................ COMMAND=('string') - lists all your user defined g-code macros that use a command string that you specify in the parmeter COMMAND
#    (parameter appears by itself) ................................ SHOW_MESH=0 - print all parameters (printer[*]) expect for two sections configfile section and bed_mesh section
#    (parameter appears by itself) ................................ SHOW_MESH=1 - print all parameters  (printer[*]) expect for one sections configfile section 
#    (parameter appears by itself) ................................ C="-99" - print ONLY one section printer[configfile]config section
#    (parameter appears by itself) ................................ S="-99" - print ONLY one section printer[configfile]settings section
#    (parameter can appear by itself or only with JOIN parameter)...VAR_NAME=('string or string.list.seperated.by.a.period') - search in printer[VAR_NAME] or print[VAR_NAME].listname.listname.lisanme and returns the value and type of variable -> Filter results based on name (or the list of names, this is an exact match)
#    (parameter can only appear with VAR_NAME parameter)............JOIN=(integer, 0,1) -> Used with VAR_NAME only. Set to 0 to stop carriage returns to be added to the end of output for non-string results. Default 1 (add a return carriage to the output for non-string results)
#    (parameter appears by itself) ................................ SVAR=('string') - search in any key of the printer object model except the "last value field" for this string (this does not have to be an exact string match) and print out the path that contains the search string
#
# / Usage: 
#        SEARCH_PRINTER_OBJECTS P='gcode_macro _Probe_Variables'                ; this search is case sensitive
#        SEARCH_PRINTER_OBJECTS C='temperature_sensor M_Y-Axis_Frame_Temp'      ; this search is case sensitive
#        SEARCH_PRINTER_OBJECTS C='mcu EBBCan'                                  ; this search is case sensitive
#        SEARCH_PRINTER_OBJECTS P='mcu EBBCan'                                  ; this search is case sensitive
#        SEARCH_PRINTER_OBJECTS C='probe'                                       ; this search is case sensitive
#        SEARCH_PRINTER_OBJECTS S='probe'                                       ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS S='306'                                         ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS                                                 ; print all parameters expect configfile
#        SEARCH_PRINTER_OBJECTS NAME="speed" VALUE=0.0                          ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS NAME='config'                                   ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS VALUE=None                                      ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS C="-99"                                         ; print only configfile.config
#        SEARCH_PRINTER_OBJECTS S="-99"                                         ; print only configfile.settings
#        SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead                               ; this search is case sensitive - Returns value and type of variable printer.toolhead
#        SEARCH_PRINTER_OBJECTS VAR_NAME=bed_mesh.profiles.default.points.1.0   ; this search is case sensitive - Returns value and type of variable printer.bed_mesh.profiles.default.points[1][0]
#        SEARCH_PRINTER_OBJECTS SVAR=config                                     ; this search is NOT case sensitive                       ;
#        SEARCH_PRINTER_OBJECTS SVAR=homing_positive_dir                        ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS SVAR=driver_PWM_OFS                             ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS SVAR="driver_PWM_OFS"                           ; this search is NOT case sensitive
#        SEARCH_PRINTER_OBJECTS SVAR=" "                                        ; print out the whole PRINTER OBJ for this printer
#
#
# EXAMPLES:
# SEARCH_PRINTER_OBJECTS P="tmc2209 stepper_z3"
# SEARCH_PRINTER_OBJECTS C="gcode_macro current_normal" - will not work because the gcode name in configfile.config is the actual string type in so it is = "gcode_macro CURRENT_NORMAL" 
# SEARCH_PRINTER_OBJECTS S="gcode_macro CURRENT_NORMAL" - now works because this macro forces the S= searched to be done in lower case
# SEARCH_PRINTER_OBJECTS C="gcode_macro CURRENT_NORMAL" - when using the C= parmaeter be careful with the CASE of each character.  The C= is case sensitive!
# SEARCH_PRINTER_OBJECTS S="extruder"
# SEARCH_PRINTER_OBJECTS S="gcode_macro current_normal"
# SEARCH_PRINTER_OBJECTS C="temperature_sensor O_Electronic_Case_Temp"
# SEARCH_PRINTER_OBJECTS NAME='config' SHOW_CFG=0
# SEARCH_PRINTER_OBJECTS NAME='config' SHOW_CFG=1
# SEARCH_PRINTER_OBJECTS VALUE=None
# SEARCH_PRINTER_OBJECTS NAME="mcu_phase_offset" VALUE='125' SHOW_CFG=0
# SEARCH_PRINTER_OBJECTS NAME="speed" VALUE=0.0
# SEARCH_PRINTER_OBJECTS NAME="SPEED" VALUE=0.0
# SEARCH_PRINTER_OBJECTS NAME="speed" 
# SEARCH_PRINTER_OBJECTS VALUE=0.0
# SEARCH_PRINTER_OBJECTS S=EXTRUDER
# SEARCH_PRINTER_OBJECTS COMMAND="m190"
# SEARCH_PRINTER_OBJECTS COMMAND=M190             ;all gcode command string are converted to lower case before the search begins and the comparision is done is lower case also, so this command will produce the same result as the previous command
# SEARCH_PRINTER_OBJECTS SHOW_MESH=0              ;print all parameters expect for two sections configfile section and bed_mesh section
# SEARCH_PRINTER_OBJECTS                          ;print all parameters expect for two sections configfile section and bed_mesh section
# SEARCH_PRINTER_OBJECTS SHOW_MESH=1              ;print all parameters expect for one sections configfile section 
# SEARCH_PRINTER_OBJECTS C="-99"                  ;print only configfile.config
# SEARCH_PRINTER_OBJECTS S="-99"                  ;print only configfile.settings
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead                                               ;mapping - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead JOIN=0                                        ;mapping - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead Join=1                                        ;mapping - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=bed_mesh.profiles.default.points.1.0                   ;float - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=bed_mesh.profiles.default.points.0.0                   ;float - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead.axis_maximum                                  ;iterable - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead.estimated_print_time                          ;float - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead.stalls                                        ;integer - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=toolhead.extruder                                      ;string - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=gcode_move.absolute_extrude                            :boolean - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=max                                                    ;does not exist
# SEARCH_PRINTER_OBJECTS VAR_NAME=manual_probe.z_position                                ;None - this search is case sensitive
# SEARCH_PRINTER_OBJECTS VAR_NAME=configfile.config.probe                                ;mapping - this search is case sensitive
# SEARCH_PRINTER_OBJECTS SVAR=homing_positive_dir                                        ;this search is NOT case sensitive
# SEARCH_PRINTER_OBJECTS SVAR=driver_PWM_OFS                                             ;this search is NOT case sensitive
# SEARCH_PRINTER_OBJECTS SVAR=config                                                     ;this will print out both configfile.config and configfile.settings branch (takes 6 minutes to finish running) ; this search is NOT case sensitive
# SEARCH_PRINTER_OBJECTS SVAR='profile'                                                  ;this search is NOT case sensitive
# SEARCH_PRINTER_OBJECTS SVAR=" "                                                        ;this search is NOT case sensitive
#
#
# CAUTION about the CASE of the characters: When using the C= or S= or P= (what I call "parameter_search") watch the case (upper or lower case) of each character.
#       Since this "parameter_search" does not cause the printer object string to all be in lower case then you MUST
#       watch the case of each letter of the string you are searching for.  So if you want "gcode_macro CURRENT_NORMAL" and the
#       gcode macro name is really "gcode_macro CURRENT_NORMAL" and you searched with C= parameter than the search will not show it because
#       C= parameter does not force the search to occur in lower case.  Try using the S= parmaeter.  I have forced the S= parameter
#       to lower case since printer[configfile].settings uses all lower case characters. 
#
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# ---NONE---
#.................................................................................................................
# Required external macro(s) used by this macro set.
#
# ---NONE---  
#.................................................................................................................
#.................................................................................................................
#
## URL Resources:  https://jinja.palletsprojects.com/en/2.11.x/templates/#for, see "Inside of a for-loop block, you can access some special variables:"
#                  https://book.pythontips.com/en/latest/for_-_else.html#else-clause
#   
#.................................................................................................................
#
# use ls -la /tmp/printer to find out which device /tmp/printer points to.
# output:
#     /tmp/printer -> /dev/pts/1
# to save the output from the UI console ssh over to pi:
# sudo cat /dev/pts/1 > /home/pi/UI/console_config2.txt
#   to exit CTRL-C
#
###############################################################################
#          SEARCH_PRINTER_OBJECTS
###############################################################################
# List of name1 in printer object:
#
# bed_mesh
# configfile
#   configfile.config
#   configfile.settings
# controller_fan xxx
# display_status
# extruder
# fan
# fan_generic xxx
# filament_motion_sensor xxxx
# firmware_retraction
# gcode_macro xxxx
# gcode_move
# heater_bed
# heater_fan xxx
# heaters
# idle_timeout
# manual_probe
# mcu
# mcu EBBCan
# mcu rpi
# mcu tinyfan
# motion_report
# neopixel xxxx
# output_pin xxxx
# pause_resume
# print_stats
# probe
# quad_gantry_level
# query_endstops
# save_variables
# system_stats
# temperature_fan xxx
# temperature_host xxx
# temperature_sensor xxx
# tmc2209 extruder
# tmc2209 xxx
# toolhead
# virtual_sdcard
# webhooks
# z_calibration
# z_thermal_adjust
#
#.................................................................................................................
# SEARCH_PRINTER_OBJECTS S=homing_positive_dir
#
[gcode_macro SEARCH_PRINTER_OBJECTS]
description: Helper: Dump Klipper parameters located in printer object to terminal, which are specified by the given params; this combines 5 different searches into on PRINTER OBJECT search
gcode:
  {% set variable_search = True if (params.NAME or params.VALUE) else False %}         ;DUMP_VARIABLES
  {% set parameter_search = True if (params.C or params.S or params.P) else False %}   ;DUMP_PARAMETER
  {% set gcode_command_search = True if params.COMMAND else False %}                   ;SEARCH_GCODE_ROUTINES
  {% set get_variable_search = True if (params.VAR_NAME) else False %}                 ;GET_VARIABLE
  {% set search_vars_search = True if params.SVAR else False %}                        ;SEARCH_VARS
  
  {% if variable_search == False and parameter_search == False and gcode_command_search == False and 
                                     get_variable_search == False and search_vars_search == False %}
      # none of the params have been defined so print out all parameters expect configfile 
      {% set print_printer_parameters = True %}
      {% set show_mesh = params.SHOW_MESH|default(0)|int %}  
  {% else %}    
      {% set print_printer_parameters = False %}
  {% endif %}

  {% if gcode_command_search %}
      {% set ns = namespace(num=0, delayed_num=0, homing_override=0, idle_timeout=0) %}
  {% elif variable_search %}
      {% set filter_name = params.NAME|default('')|string|lower %}                       
      {% set filter_value = params.VALUE|default('')|string|lower %}                     
      {% set show_cfg = params.SHOW_CFG|default(0)|int %}  
  {% elif get_variable_search %}
      {% set names = (params.VAR_NAME).split('.')|list %}                       
      {% set join = (params.JOIN)|default(1)|int %}                     
      {% set _dummy0 = namespace( break = 0 ) %}
  {% elif search_vars_search %}
      {% set ns = namespace() %}
      {% set show_gcode = params.GCODE|default(0)|int %} 
  {% endif %}
  
  {% if parameter_search or gcode_command_search or print_printer_parameters %}
      {% if parameter_search or gcode_command_search %}
          {% set config = True if (params.C or params.S or params.COMMAND) else False %}
      {% elif print_printer_parameters %}
          {% set config = False %}
      {% endif %}
  {% endif %}
  
  {% if parameter_search %}
      {% set path = 'config' if params.C  else 'settings' if params.S %}
  {% endif %}
  
  {% if gcode_command_search %}  
      {% set gcode_cmd = params.COMMAND|default('')|string|lower %}
  {% endif %}
  
  {% if parameter_search %}
        {% set search = (params.C) if (params.C) else (params.S|lower) if (params.S) else (params.P) if (params.P) %} 
  {% elif search_vars_search %}  
        {% set search = params.SVAR|default('profile')|string|lower %}  
  {% endif %}
    
  {% set out = [] %}
  
  #### DEBUG SECTION ####
  # {action_respond_info("variable_search = %s;" % variable_search|string)}
  # {action_respond_info("parameter_search = %s;" % parameter_search|string)}
  # {action_respond_info("gcode_command_search = %s;" % gcode_command_search|string)}
  # {action_respond_info("print_printer_parameters = %s; show_mesh = %s;" % (print_printer_parameters|string, show_mesh|string))}
  
  # {% if variable_search %}
      # {action_respond_info("filter_name = %s; filter_value = %s; show_cfg = %d;" % (filter_name, filter_value, show_cfg))}
  # {% elif parameter_search %}
      # {action_respond_info("config = %s; path = %s; search = %s;" % (config|string, path, search))}
  # {% elif gcode_command_search %}
      # {action_respond_info("gcode_cmd = %s; ns.num = %d; ns.delayed_num = %d;" % (gcode_cmd, ns.num, ns.delayed_num))}   
  # {% endif %}
  #### END of DEBUG SECTION ####
  
  ################################################### Begin SECTION for DUMP_PARAMETER, DUMP_VARIABLES and SEARCH_GCODE_ROUTINES ####################
  {% if parameter_search or print_printer_parameters or variable_search or gcode_command_search %}   
  
    {% for name1 in printer|sort %}
        #-----------------------------------------  SECTION for DUMP_PARAMETER  ----------------------------------------------------------------  
        {% if parameter_search or print_printer_parameters %}   
            {% if config %}                                                                     ; print the searched printer.configfile[path] parameter        
                {% if name1 is in ['configfile'] %}                                              
                    {% for name2 in printer[name1][path]|sort %}
                      {% if search != "-99" %}                    
                        {% if name2 is in [search] %}                                                                          
                            {% for name3, value in printer[name1][path][name2].items() %}                                 
                                {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %                             
                                        (path, name2, name3, value)) %}                                                        
                            {% endfor %}                                                                                       
                        {% endif %}  
                      {% else %}
                         # print out printer.configfile branch
                         {% for name3, value in printer[name1][path][name2].items() %}
                             {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                                   (path, name2, name3, value)) %}
                         {% endfor %}
                      {% endif %}
                    {% endfor %}                                                                                               
                {% endif %} 
            {% else %}       
                {% for name2, value2 in printer[name1].items()|sort %} ; search for anything expext printer.configfile          
                    {% if search is not defined and name1 is not in ['configfile'] and show_mesh == 1 %} ; print all printer. parameters                        
                        {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value2)) %}   
                    {% elif search is not defined and name1 is not in ['configfile', 'bed_mesh'] and show_mesh == 0 %} ; print all printer. parameters except bed_mesh                       
                        {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value2)) %}                                               
                    {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter              
                        {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value2)) %}                         
                    {% endif %}                                                                                                
                {% endfor %}                                                                                                   
            {% endif %} 
        #-----------------------------------------  SECTION for DUMP_VARIABLES  ----------------------------------------------------------------              
        {% elif variable_search %}                                                               
                    {% for name2 in printer[name1] %}                                            
                        {% if (show_cfg or not (name1|lower == 'configfile' and name2|lower in ['config', 'settings'])) and (filter_name in name1|lower or filter_name in name2|lower) and filter_value in printer[name1][name2]|string|lower %}  
                            {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) %}    
                        {% endif %} 
                    {% else %}                                                                                                 
                        {% if filter_name in name1|lower and filter_value in printer[name1]|string|lower %}                    
                           {% set _dummy = out.append("printer['%s'] = %s" % (name1, printer[name1])) %}                        
                        {% endif %}                                                                                            
                    {% endfor %} 
        #-----------------------------------------  SECTION for SEARCH_GCODE_ROUTINES  ----------------------------------------------------------  
        {% elif gcode_command_search %}                                                          
                    {% for name2 in printer[name1] %}                                                       
                        {% if ( (name1|lower == 'configfile') and (name2|lower in ['config']) ) %}  
                                {% if printer[name1][name2].items() %}                           
                                    {% for name3, value3 in printer[name1][name2].items() %}      
                                        #comment : name3 = gcode_macro print_end; value3 = {'gcode': '\n_general_debug msg="   
                                        {% if "gcode_macro " in name3 or "delayed_gcode" in name3 %}                           
                                                {% for name4, value4 in value3.items() %}                                      
                                                     # comment : name4 = gcode; value4={% set message = params.msg %}          
                                                    {% if (("gcode" in name4) and ((gcode_cmd|lower) in (value4|lower))) %}    
                                                          {% if "gcode_macro " in name3 %}                                     
                                                              {% set ns.num = ns.num + 1 %}  
                                                               #['gcode_macro _USER_VARIABLE']                                                              
                                                              {% set _dummy = out.append('G-CODE_________name[%d]: %s' % (ns.num, name3[12:]|upper) ) %}   
                                                          {% elif "delayed_gcode" in name3 %}                                  
                                                              {% set ns.delayed_num = ns.delayed_num + 1 %}  
                                                               #['delayed_gcode _lights_ready']                                                             
                                                              {% set _dummy = out.append("DELAYED_G-CODE_name[%d]: %s" % (ns.delayed_num, name3[14:]|upper) ) %}                                                               
                                                          {% endif %}
                                                    {% endif %}                                                                
                                                {% endfor %}   
                                        {% elif ( name3 in ['homing_override','idle_timeout'] ) %} 
                                            {% for name4, value4 in value3.items() %}                                         
                                                {% if (("gcode" in name4) and ((gcode_cmd|lower) in (value4|lower))) %}                                            
                                                          {% if "homing_override" in name3 %}  
                                                              {% set ns.homing_override = ns.homing_override + 1 %}
                                                              #homing_override 
                                                              {% set _dummy = out.append('HOMING_OVERRIDE____[%d]: %s' % (ns.homing_override, name3|upper) ) %}
                                                          {% elif "idle_timeout" in name3 %} 
                                                              {% set ns.idle_timeout = ns.idle_timeout + 1 %} 
                                                              #idle_timeout 
                                                              {% set _dummy = out.append('IDLE_TIMEOUT_______[%d]: %s' % (ns.idle_timeout, name3|upper) ) %}                                                              
                                                          {% endif %}                                                     
                                                {% endif %}                                                                
                                            {% endfor %}   
                                        {% endif %}                                                                            
                                    {% endfor %}                                                                               
                                {% endif %}                                                                                    
                        {% endif %}                                                                                            
                    {% endfor %}                                                                                               
        {% endif %}  
        
    {% endfor %} 
  ################################################### End SECTION for DUMP_PARAMETER, DUMP_VARIABLES and SEARCH_GCODE_ROUTINES #######################  
  ###################################################  Begin SECTION for GET_VARIABLE ################################################################
  {% elif get_variable_search %}
    #{action_respond_info("names = %s;" % names|string)}    ; debug  
    {% if printer[names|first] %}
        {% set ns = namespace( out = printer[names|first] ) %}
    
        {% for name in names if _dummy0.break == 0 %}
            #{action_respond_info("name = %s; loop.index = %d" % (name|string, loop.index))}   ; debug
            {% if loop.index > 1 %}  ;The current iteration of the loop. (1 indexed)
                {% if name in ns.out %}
                    {% set ns.out = ns.out[name] %}
                    #{action_respond_info("ns.out = %s;" % (ns.out|string))}       ; debug
                {% elif name[0] in '0123456789' and ns.out is iterable and ns.out is not string and ns.out is not mapping and ns.out|length > name[0]|int %}
                    {% set ns.out = ns.out[name|int] %}
                    #{action_respond_info("=====>ns.out = %s;" % (ns.out|string))}  ; debug
                {% else %}
                    {% set _dummy0.break = loop.index0 %}
                    #{action_respond_info(" RE-setting _dummy0.break  to %s" % _dummy0.break)}  ; debug
                {% endif %}
            #{% else %} ; debug
                # debug
                #{action_respond_info("loop.index = 1")} 
            {% endif %}
        {% endfor %}
    
        {% if ns.out is boolean %}
            { action_respond_info('Type: boolean') }
        {% elif ns.out is float %}
            { action_respond_info('Type: float') }
        {% elif ns.out is integer %}
            { action_respond_info('Type: integer') }
        {% elif ns.out is mapping %}
            { action_respond_info('Type: mapping') }
        {% elif ns.out is string %}
            { action_respond_info('Type: string') }
        {% elif ns.out is iterable %}
            { action_respond_info('Type: iterable') }
        {% elif ns.out is none %}
            { action_respond_info('Type: none') }
        {% elif ns.out is undefined %}
            { action_respond_info('Type: undefined') }
        {% elif ns.out is callable %}
            { action_respond_info('Type: callable') }
        {% else %}
            { action_respond_info('Type: unknown') }
        {% endif %}
    
        {% if join and ns.out is iterable and ns.out is not string and ns.out is not mapping %}
            #{action_respond_info("IF part ")}  ; debug
            { action_respond_info('%s' % ns.out|join("\n")) }
        {% else %}
            #{action_respond_info("ELSE part ")}  ; debug
            {% if ns.out is mapping and join %}
                {% for key in ns.out|sort %}
                    {% if _dummy0.break == 0 and (not('join=' in rawparams|lower)) %}
                        { action_respond_info("printer['%s'].%s = %s" % (rawparams[9:], key, ns.out[key]) ) } 
                    {% elif _dummy0.break == 0 and ('join=' in rawparams|lower) %}
                        {% set end = rawparams|length %}
                        { action_respond_info("printer['%s'].%s = %s" % (rawparams[9:(end-7)], key, ns.out[key]) ) } 
                    {% endif %}                    
                {% endfor %}
            {% else %}
                { action_respond_info('%s' % ns.out) }
            {% endif %}
        {% endif %}
    
        {% if _dummy0.break != 0 %}
            {% set end2 = _dummy0.break|int %}
            { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:end2]|join('.'), names[end2])) }
        {% endif %}
    
    {% else %}
        {action_respond_info("Nothing found for \"SEARCH_PRINTER_OBJECTS %s\"" % rawparams)}
    {% endif %} 
  ###################################################  End SECTION for GET_VARIABLE ################################################################
  ################################################### Begin SECTION for SEARCH_VARS ################################################################    
  {% elif search_vars_search %}
  
     ################################## INSTRUCTION on how to save the Console output to a text file #########################
     #
     #
     # If you want to capture the output from the Mainsail or Fluidd UI console to a text file do the following:
     #  SSH over the the rapberry pi that is running Klipper for your printer then do the following commands at the pi's commad prompt:
     #    To find out which device /tmp/printer is presetly using do the following command:
     #       $ ls -la /tmp/printer 
     #       output from the above command will look like the following:
     #          /tmp/printer -> /dev/pts/1
     #    To save the output from the Mainsail or Fluidd UI console to a file do the following command at the pi's command prompt:
     #       The next command only needs to be done one time.  This creates a dirctory to store the console.txt files in
     #       $ mkdir /home/pi/<your_directory> 
     #       This next command will redirect the Mainsail or Fluidd console output to a file called console.txt it will be stored at /home/pi/<your_directory>     
     #       $ sudo cat /dev/pts/1 > /home/pi/<your_directory>/console.txt
     #       for me: sudo cat /dev/pts/1 > /home/pi/UI/console.txt
     #
     #       Leave the SSH window open and do not exit out of the window (press CTRL-C) until after the SEARCH_PRINTER_OBJECTS command
     #       has finished executing in the Mainsail or Fluidd console. Now go to the Mainsail or Fluidd console prompt and type in
     #       your SEARCH_PRINTER_OBJECTS SVAR="your_search_text" command.  SEARCH_PRINTER_OBJECTS macro will run.  You will know it finishes
     #       when the output stop scrollings the console window or if the load is too much Klipper will automatically shutdown.  A word
     #       of warning never execute SEARCH_PRINTER_OBJECTS SVAR=" " with an a single blank space string (it might and probably will cause Klipper to crash).
     #       A signle blank space in SVAR=" " will cause the whole printer object model to be displayed to the console window.  Personally I do not
     #       execute SEARCH_PRINTER_OBJECTS SVAR="your_search_text" while my printer is running a print job.
     #
     #       Once SEARCH_PRINTER_OBJECTS SVAR="your_search_text" is done go back to the SSH window on the reapberry pi and hit the Control-C keys
     #       so you can exit back out to the pi's command prompt.  This stops the output from going to the /home/pi/<your_directory>/console.txt file
     #       Use SCP Software or some other software to move the /home/pi/<your_directory>/console.txt to you desktop computer. 
     #
     #       SEARCH_PRINTER_OBJECTS SVAR=" " 
    
      {% set ns2 = namespace(flag = 0) %}  ; setup a flag variable so a message will be displayed if nothing is produced by the search
      
      {% for item in printer|sort  %}
          {% if ' ' in item %}
              {% set ns.path = ['printer', "['%s']" % (item), ''] %}
          {% else %}
              {% set ns.path = ['printer.', item, ''] %}   
          {% endif %} 

          {% if search in ns.path|lower %}
              {% set ns2.flag = 1%}
              { action_respond_info(ns.path|join) }
          {% endif %} 

          {% if printer[item].items()|sort %}
              {% for childkey, child in printer[item].items() recursive %}
                  {% set ns.path = ns.path[:loop.depth|int + 1] %}

                  {% if ' ' in childkey %}
                      {% set null = ns.path.append("['%s']" % (childkey)) %}
                  {% else %}
                      {% set null = ns.path.append(".%s" % (childkey)) %}
                  {% endif %} 
                  
                  {% if child is mapping  %}
                       { loop(child.items()) }
                  {% else %}
                        {% if search in ns.path|lower %}
                                  {% set ns2.flag = 1%}
                                  { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                        {% endif %}
                  {% endif %} 
              {% endfor %}
          {% endif %} 
      {% endfor %}
      
      {% if ns2.flag == 0 %}
          {action_respond_info("Nothing found for \"SEARCH_PRINTER_OBJECTS %s\"" % rawparams)} 
      {% endif %}     
  
   ################################################### End SECTION for SEARCH_VARS ################################################################         
  {% endif %} # end of if -- elif -- elif 
    
  {% if ( (gcode_command_search) and ( out|length > 0 ) ) %}                                                                   
      {action_respond_info("Found a TOTAL of %d occurrances for '%s' command in USER MACROS." % ((ns.num + ns.delayed_num + ns.homing_override + ns.idle_timeout), gcode_cmd|upper)) }     
      {action_respond_info("Found %d occurrance(s) in G-Code macros &\n found %d occurrance(s) in DELAYED G-Code macros &\n found %d occurrance(s) in HOMING_OVERRIDE macro &\n found %d occurrance(s) in IDLE_TIMEOUT macro" 
                           % (ns.num, ns.delayed_num, ns.homing_override, ns.idle_timeout)) } 
      {action_respond_info("The following list of G-Code macros contain the command['%s']:" % gcode_cmd)}                                         
  {% endif %}                                                                                                                                     
  {% if parameter_search or variable_search or gcode_command_search or print_printer_parameters %}                                                                            
      {% if out|length > 0 %}                                                                                                                     
          {action_respond_info(out|join("\n"))}                                                                                                   
      {% else %}                                                                                                                                  
          {action_respond_info("Nothing found for \"SEARCH_PRINTER_OBJECTS %s\"" % rawparams)}                                                            
      {% endif %}                                                                                                                                 
  {% endif %}                                                                                                                                     