#.................................................................................................................
# _SETPROBESTATE - required parameters: ACTION{query,dock,attach} / Usage: _SETPROBESTATE ACTION={query,dock,attach}
#
# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
#
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# [gcode_macro _GLOBAL_VARS]
#  variable_probe_variables.probe_attached
#  variable_probe_variables.probe_state
#
#.................................................................................................................
# Required external macro(s) used by this macro.
#
# _GLOBAL_VARS
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://github.com/jlas1/Klicky-Probe/tree/main/Klipper_macros
#      
#.................................................................................................................

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
description: Helper: Klicky Probe; query the probe to determine its current state (docked or attached) and raise an error if a problem is detected
gcode:
    {% set global = printer['gcode_macro _GLOBAL_VARS'] %}
    {% set probe_variables = global.probe_variables %}
    
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        {% set _dummy = probe_variables.update({'probe_attached':False}) %}        
        SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=probe_variables VALUE="{probe_variables}" 
    {% else %}
        # If not triggered (false), probe attached
        {% set _dummy = probe_variables.update({'probe_attached':True}) %}        
        SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=probe_variables VALUE="{probe_variables}" 
    {% endif %}

    {% if action == 'query' %}
        {% set _dummy = probe_variables.update({'probe_state':query_probe_triggered}) %}        
        SET_GCODE_VARIABLE MACRO=_GLOBAL_VARS VARIABLE=probe_variables VALUE="{probe_variables}" 
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}
