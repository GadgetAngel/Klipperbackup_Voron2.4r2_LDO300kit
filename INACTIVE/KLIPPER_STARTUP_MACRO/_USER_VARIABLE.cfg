#.................................................................................................................
# _USER_VARIABLE - No additional options/ Usage: NONE
#    This macro holds all the global variable for this printer
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
## ---NONE---
#
#.................................................................................................................
# Required external macro(s) used by this macro.
#
# _general_Debug
# _MAG_PROBE
#
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://github.com/zellneralex/klipper_config/blob/master/printer.cfg#L170
##
#.................................................................................................................

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
gcode:
_general_Debug msg="_USER_VARIABLE - entering"

variable_current_control: {}                      ;current control user global variables
variable_filament: {}                             ;different user user variables used for differnet filaments - all values are in mm
variable_respond: {}                              ;enable or disable the default of outputs to the console
variable_bedfanvars: {}                           ;bedfanvars user gloabal variables
variable_fancheckvars: {}                         ;fan check user global variables
variable_status_presets: {}                       ;status_presets user global variables
varaible_sb_vars: {}                              ;sb_vars user global variables

variable_hw: {}                                   ;enables or disables extra hardware
variable_homing: {}                               ;user variables pertaining to homing
variable_z_hop: 0                                 ;minimal z height for all movment
variable_speed: {}                                ;all speeds are defined in [mm/s] - user defined variables that effect speed
variable_probe: {}                                ;these are only needed if you use a magnetic probe like klicky
variable_park: {}                                 ;different park positions
variable_purge: {}                                ;all user variables needed to for the purge bucket and brush
variable_print_start: {}                          ;different user variables used in PRINT_START
variable_unload_sd: False                         ;unload sd file at PRINT_END or CANCEL_PRINT. Set this to False if you often reprint the same file
variable_prime: {}                                ;user variables that pretain to printing the prime line
variable_peripheral: {}                           ;values needed for different hardware
variable_run: False                               ;used internal to detect that the _USER_VARIABLE was executed
gcode:
  ###################################################################
  ##                     start of user defines                     ##
  ## this needs to be changed for your printer                     ##
  ###################################################################
  ##### SB_VARS SECTION #####
  {% set user_sb_vars_fan_led_name     = "sb_leds" %}
  {% set user_sb_vars_fan_idx          = "1,2,3,4,5,6,7,8"  %}
  {% set user_sb_vars_logo_led_name    = "sb_leds" %}
  {% set user_sb_vars_logo_idx         = "9,10,11,12,13,14,15,16" %}
  {% set user_sb_vars_nozzle_led_name  = "sb_leds" %}
  {% set user_sb_vars_nozzle_idx       = "17,18" %}
  {% set user_sb_vars_bar_led_name     = "progress_bar_leds" %}
  {% set user_sb_vars_bar_idx          = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33" %}
  ##### End of SB_VARS SECTION #####
  ##### STATUS_PRESETS SECTION #####
  {% set user_status_presets_off = 2 %}        ; preset number in WLED for the off preset
  {% set user_status_presets_lookup = {
                             'off': 2,         # equivalent to not set in WLED
                             'ready': 9,       # if you see the word "ready" apply preset 9
                             'busy':  4,       # if you see the word "busy" apply preset 4
                             'heating': 11,    # if you see the word "heating" apply preset 11
                             'leveling': 7,    # etc... add more states/presets to match your WLED setup
                             'homing': 13,
                             'cleaning': 5,
                             'meshing': 8,
                             'calibrating_z': 6,
                             'printing': 14,
                             'complete': 10,
                             'cooling': 12
                                      }
  %}
  ##### End of STATUS_PRESETS SECTION #####
  ##### BEDFANVARS SECTION #####
  {% set user_bedfanvars_threshold = 110 %}     ; If bed temp target is equal to or above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
  {% set user_bedfanvars_fast = 0.4 %}          ; Fan speed once bed temp is reached
  {% set user_bedfanvars_slow = 0.2 %}          ; Fan speed while bed is heating
  {% set user_bedfanvars_offset = 0 %}          ; Fan is off when chamber temp < (defaultenclosure-offset), if temp is falling.
  {% set user_bedfanvars_chamber_fast = 0.60 %} ; fan speed to use when trying to keep chamber enclosure at defaultEnclosure temperature (set point chamber temperature)
  ##### End of BEDFANVARS SECTION #####
  ##### CURRENT CONTROL SECTION #####
  {% set user_current_control_PrintCurrentXY = 1.1 %}     ; Steppermotor current to be used while printing
  {% set user_current_control_PrintCurrentZ = 0.8 %}      ; Steppermotor current to be used while printing
  ##### End of CURRENT CONTROL SECTION #####
  ##### FANCHECKVARS SECTION #####


  ##### End of FANCHECKVARS SECTION #####
  ##### Z Endstop SECTION #####
  {% set user_z_endstop_xy = [123.0,355.0] %}  ; z Endstop position insight left profil
  {% set user_z_endstop_hop = 7.5 %}           ; z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}          ; reduced homing curent for z
  {% set user_home_accel = 1200 %}             ; reduced ACCEL for homing
  {% set user_bed_y_offset = 5 %}              ; Endstop offset to bed max y
  ##### End of Z Endstop SECTION #####
  ##### all user defined speeds [mm/sec] SECTION #####
  {% set user_nonprinting_speed_NPLimitAccel = 3000 %}   ; NON-PRINT ACCEL LIMITS - Accel velocity limit
  {% set user_nonprinting_speed_NPLimitDecel = 1500 %}   ; NON-PRINT ACCEL LIMITS - Decel velocity limit
  {% set user_nonprinting_speed_travel_speed = 200 %}    ; NON-PRINT ACCEL LIMITS - how fast all other travel moves will be performed when running macros

  {% set user_z_hop_speed = 15 %}                        ; default z_hop speed
  {% set user_retract_speed = 30 %}                      ; default retract/extrude speed
  {% set user_travel_speed = 300 %}                      ; travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}                   ; dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}                ; load/unload speed
  {% set user_wipe_speed = 60 %}                         ; wipe move speed
  {% set user_prime_speed = 25 %}                        ; prime line speed
  ##### End of all user defined speeds [mm/sec] SECTION #####
  ##### Mag Probe SECTION #####
  {% set user_probe_dock_pos = [0,355] %}      ; position of the dock
  {% set user_probe_delta_x = 30 %}            ; x offset for position before dock
  {% set user_probe_delta_y = -30 %}           ; y offset to move probe out of dock
  {% set user_z_probe_hop = 15.5 %}            ; z minimum heigh to avoid crash
  ##### End of Mag Probe SECTION #####
  ##### Park Position SECTION #####
  {% set user_park_ParkHeightPercentage = 0.50 %}       ; The percentage of Z height to park the nozzle, expressed as 0.2 to 1.0
                                                        ; If the printed object is taller then the expressed Z-axis percent height,
                                                        ; the toolhead will then park 10mm above the object.

  {% set user_park_xy_delta = 25 %}                     ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}                  ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}                        ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}               ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}                 ; park head at CANCEL_PRINT if not paused [False/True]
  ##### End of Park Position SECTION #####
  ##### Filament SECTION #####
  {% set user_filament_current_profile = "ABS" %}                   ; the profile you wanted loaded when Klipper starts up ("ABS"or "PETG")
  ##### ABS Filament #####
  {% set user_filament_ABS_LimitAccel = 3501 %}                     ; PRINT ABS ACCEL LIMITS - ACCEL velocity limit
  {% set user_filament_ABS_LimitDecel = 1751 %}                     ; PRINT ABS ACCEL LIMITS - DECEL velocity limit
  {% set user_filament_ABS_defaultTempNozzle = 245 %}               ; DEFAULT ABS TEMPERATURES - NOZZLE EXTRUDING temperature if none is specified
  {% set user_filament_ABS_defaultReadyNozzle = 210 %}              ; DEFAULT ABS TEMPERATURES - NOZZLE READY temperature if none is specified
  {% set user_filament_ABS_defaultWarmNozzle = 160 %}               ; DEFAULT ABS TEMPERATURES - NOZZLE WARMING temperature if none is specified
  {% set user_filament_ABS_defaultTempBed = 110 %}                  ; DEFAULT ABS TEMPERATURES - BED temperature if none is specified
  {% set user_filament_ABS_defaultEnclosure = 40 %}                 ; DEFAULT ABS TEMPERATURES - ENCLOSURE temperature if none is specified
  {% set user_filament_ABS_MeshToApply = "INSITU" %}                ; ABS MESH :
                                                                             #The saved mesh to apply, mesh name must be enclosed with "". The bundled HOTMESH
                                                                             # macro will save it's results as the value entered here.
                                                                             # *!* To perform a fresh in-situation mesh calibration, instead of loading a saved
                                                                             # mesh, use "INSITU" for MeshToApply. This will be applied after Z Comp probing.
                                                                             # *!* To completely skip applying mesh, use "NONE" for MeshToApply

  {% set user_filament_ABS_QGLbeforeSoakMesh = True %}              ; ABS HEATSOAK & COOLING - (True/False) Perfrom QGL before applying heat soak for HOTMESH
  {% set user_filament_ABS_QGLbeforeSoakPrint = True %}             ; ABS HEATSOAK & COOLING - (True/False) Perfrom QGL before applying heat soak for PRINT
  {% set user_filament_ABS_HotmeshSoakMinutes = 30 %}               ; ABS HEATSOAK & COOLING - Minutes to heat-soak prior to running mesh
  {% set user_filament_ABS_PrePrintSoakMinutes = 25 %}              ; ABS HEATSOAK & COOLING - Minutes to heat-soak prior to printing
  {% set user_filament_ABS_InsituMeshSoakMinutes = 01 %}            ; ABS HEATSOAK & COOLING - Minutes to heat-soak prior to performing an insitu mesh (in addition to PrePrintSoak)
  {% set user_filament_ABS_PostPrintCool = 1 %}                     ; ABS HEATSOAK & COOLING - Post-Print cooling to prevent nozzle string, minutes of cooling
  {% set user_filament_ABS_PostPrintParkCool = 2  %}                ; ABS HEATSOAK & COOLING - Once parks, minutes of cooling
  {% set user_filament_ABS_purgeRetract = 0.3 %}                    ; ABS OTHER RETRACTIONS - After completing purgeline, how much retraction to perform (Not normally needed)
  {% set user_filament_ABS_EndRetract = 2.0 %}                      ; ABS OTHER RETRACTIONS - After print has completed, how much retraction to perform
  ##### PETG Filament #####
  {% set user_filament_PETG_LimitAccel = 3501 %}                    ; PRINT PETG ACCEL LIMITS - ACCEL velocity limit
  {% set user_filament_PETG_LimitDecel = 1751 %}                    ; PRINT PETG ACCEL LIMITS - DECEL velocity limit
  {% set user_filament_PETG_defaultTempNozzle = 240 %}              ; DEFAULT PETG TEMPERATURES - NOZZLE EXTRUDING temperature if none is specified
  {% set user_filament_PETG_defaultReadyNozzle = 210 %}             ; DEFAULT PETG TEMPERATURES - NOZZLE READY temperature if none is specified
  {% set user_filament_PETG_defaultWarmNozzle = 160 %}              ; DEFAULT PETG TEMPERATURES - NOZZLE WARMING temperature if none is specified
  {% set user_filament_PETG_defaultTempBed = 80 %}                  ; DEFAULT PETG TEMPERATURES - BED temperature if none is specified
  {% set user_filament_PETG_defaultEnclosure = 40 %}                ; DEFAULT PETG TEMPERATURES - ENCLOSURE temperature if none is specified
  {% set user_filament_PETG_MeshToApply = "MESH110" %}              ; PETG MESH :
                                                                             #The saved mesh to apply, mesh name must be enclosed with "". The bundled HOTMESH
                                                                             # macro will save it's results as the value entered here.
                                                                             # *!* To perform a fresh in-situation mesh calibration, instead of loading a saved
                                                                             # mesh, use "INSITU" for MeshToApply. This will be applied after Z Comp probing.
                                                                             # *!* To completely skip applying mesh, use "NONE" for MeshToApply
  {% set user_filament_PETG_QGLbeforeSoakMesh = True %}             ; PETG HEATSOAK & COOLING - (True/False) Perfrom QGL before applying heat soak for HOTMESH
  {% set user_filament_PETG_QGLbeforeSoakPrint = True %}            ; PETG HEATSOAK & COOLING - (True/False) Perfrom QGL before applying heat soak for PRINT
  {% set user_filament_PETG_HotmeshSoakMinutes = 25 %}              ; PETG HEATSOAK & COOLING - Minutes to heat-soak prior to running mesh
  {% set user_filament_PETG_PrePrintSoakMinutes = 15 %}             ; PETG HEATSOAK & COOLING - Minutes to heat-soak prior to printing
  {% set user_filament_PETG_InsituMeshSoakMinutes = 01 %}           ; PETG HEATSOAK & COOLING - Minutes to heat-soak prior to performing an insitu mesh (in addition to PrePrintSoak)
  {% set user_filament_PETG_PostPrintCool = 1 %}                    ; PETG HEATSOAK & COOLING - Post-Print cooling to prevent nozzle string, minutes of cooling
  {% set user_filament_PETG_PostPrintParkCool = 2  %}               ; PETG HEATSOAK & COOLING - Once parks, minutes of cooling
  {% set user_filament_PETG_purgeRetract = 0.1 %}                   ; PETG OTHER RETRACTIONS - After completing purgeline, how much retraction to perform (Not normally needed)
  {% set user_filament_PETG_EndRetract = 2.0 %}                     ; PETG OTHER RETRACTIONS - After print has completed, how much retraction to perform

  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 2 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### End of Filament SECTION #####
  ##### Purge & Brush SECTION #####
  {% set user_brush_pos = 'right' %}           ; left/right profile used
  #{% set user_brush_x_middle = 100 %}         ; mid point of brush at left profile
  {% set user_brush_x_middle = 250 %}          ; mid point of brush at right profil
  {% set user_brush_x_width = 40 %}            ; width of brush
  {% set user_brush_y_start = 351 %}           ; start point at y
  {% set user_wipe_z = 1.0 %}                  ; z for wipe moves
  {% set user_wipe_cnt = 5 %}                  ; number of full wipes
  {% set user_z_purge = 2.5 %}                 ; z above purge bucket
  ##### End of Purge & Brush SECTION #####
  ##### PRINT_START/STOP ROUTINE SECTION #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}    ; multiplier for prime line hight
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### End of PRINT_START/STOP ROUTINE SECTION #####
  ##### Prime Line SECTION #####
  {% set user_prime_start_xy = [5.0,30.0] %}   ; x&y start coordinates of prime line
  {% set user_prime_z = 0.34 %}                ; default prime layer hight
  {% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  {% set user_prime_lenght = 220 %}            ; length of prime line
  {% set user_prime_seg = 11 %}                ; segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment
  ##### End of Prime Line SECTION #####
  ##### Respond defaults SECTION #####
  {% set user_respond_debug = False %}         ; All macros that contain the external macro _general_Debug - Enable Debug output

  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 0 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 0 %}             ; Macro: _LAYER
  ##### End of Respond defaults SECTION #####
  ##### Peripheral SECTION #####
  {% set user_ADXLsoakMinutes = 30 %}         ; Minutes to heat-soak prior to ADXL measurements

  {% set user_filter_on = 0.5 %}               ; filter on value
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit
  {% set user_vent_on = 15 %}                  ; chamber fan on temperature
  {% set user_caselight_on = 0.4 %}            ; caselight on value
  {% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih
  ##### End of Peripheral SECTION #####
  ###################################################################
  ##                      end of user defines                      ##
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables
                                         else 'none'},
                   'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                                      'output_pin heater_bed_relay' in printer.configfile.settings
                                         else False},
                   'auto_z_offset' : {'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'z_calib'           if 'z_calibration' in printer
                                         else 'flexplate'         if 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'none'},
                   'mag_probe'     : {'ena' : True if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer
                                         else False},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings
                                         else False}
                  }
  %}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}
                                       )
  %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}
                                       )
  %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}
                                      )
  %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                                             else False}
                                      )
  %}
  {% set _dummy = hw_dic.auto_z_offset.update({'ena': True if hw_dic.auto_z_offset.type != 'none' else False}
                                             )
  %}
  {% set _dummy = hw_dic.auto_z_offset.update({'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'z_calib'
                                                  else False}
                                              )
  %}
  {% set _dummy = hw_dic.auto_z_offset.update({'manu': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'flexplate'
                                                  else False}
                                              )
  %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}
               }
  %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2,
                        'z': (bed.max.z - bed.min.z) / 2
                       }
  %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}
                      }
  %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_dic.mag_probe.ena and user_z_probe_hop > user_z_endstop_hop
                 else user_z_endstop_hop %}
  {% set calc_brush = {'start': user_brush_x_middle - user_brush_x_width / 2,
                       'end'  : user_brush_x_middle + user_brush_x_width / 2
                      }
  %}
  {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                       else max.x - (max.x - calc_brush.end) / 2,
                       'y': max.y
                      }
  %}
  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
                                else calc_brush.end,
                                'y': user_brush_y_start},
                      'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
                                else calc_brush.start,
                                'y': max.y}
                      }
  %}
  # prepare dictonaries
  {% set sb_vars_dic = {
                        'fan_led_name'    : user_sb_vars_fan_led_name,
                        'fan_idx'         : user_sb_vars_fan_idx,
                        'logo_led_name'   : user_sb_vars_logo_led_name,
                        'logo_idx'        : user_sb_vars_logo_idx,
                        'nozzle_led_name' : user_sb_vars_nozzle_led_name,
                        'nozzle_idx'      : user_sb_vars_nozzle_idx,
                        'bar_led_name'    : user_sb_vars_bar_led_name,
                        'bar_idx'         : user_sb_vars_bar_idx
                       }
  %}
  {% set status_presets_dic = {'off'                : user_status_presets_off,
                               'lookup'             : {'off'            : user_status_presets_lookup.off,
                                                       'ready'          : user_status_presets_lookup.ready,
                                                       'busy'           : user_status_presets_lookup.busy,
                                                       'heating'        : user_status_presets_lookup.heating,
                                                       'leveling'       : user_status_presets_lookup.leveling,
                                                       'homing'         : user_status_presets_lookup.homing,
                                                       'cleaning'       : user_status_presets_lookup.cleaning,
                                                       'meshing'        : user_status_presets_lookup.meshing,
                                                       'calibrating_z'  : user_status_presets_lookup.calibrating_z,
                                                       'printing'       : user_status_presets_lookup.printing,
                                                       'complete'       : user_status_presets_lookup.complete,
                                                       'cooling'        : user_status_presets_lookup.cooling
                                                      }
                              }
  %}
  {% set current_control_dic = { 'PrintCurrentXY'   : user_current_control_PrintCurrentXY,
                                 'PrintCurrentZ'    : user_current_control_PrintCurrentZ
                               }
  %}
  {% set bedfanvars_dic = {'threshold'     : user_bedfanvars_threshold,
                           'fast'          : user_bedfanvars_fast,
                           'slow'          : user_bedfanvars_slow,
                           'offset'        : user_bedfanvars_offset,
                           'chamber_fast'  : user_bedfanvars_chamber_fast
                          }
  %}
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel
                      }
  %}
  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
                      'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
                                 'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
                                 'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
                                 'cnt'    : user_wipe_cnt}
                      }
  %}
  {% set probe_dic = {'dock'        : {'x'    : user_probe_dock_pos[0],
                                       'y'    : user_probe_dock_pos[1] + user_probe_delta_y},
                      'store'       : {'x'    : user_probe_dock_pos[0] + user_probe_delta_x,
                                       'y'    : user_probe_dock_pos[1]}
                      }
  %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60),
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60),
                      'NPLimitAccel'  : user_nonprinting_speed_NPLimitAccel,
                      'NPLimitDecel'  : user_nonprinting_speed_NPLimitDecel,
                      'travel_speed'  : user_nonprinting_speed_travel_speed
                      }
  %}
  {% set park_dic = {'bed'                   : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'                : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'                 : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'              : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'                  : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'pause'                 : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
                     'park_at_cancel'        : user_park_at_cancel,
                     'ParkHeightPercentage'  : user_park_ParkHeightPercentage
                     }
  %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause},
                         'profile'         : {'name'                  : user_filament_current_profile,
                                              'LimitAccel'            : user_filament_ABS_LimitAccel if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_LimitAccel if user_filament_current_profile == 'PETG',
                                              'LimitDecel'            : user_filament_ABS_LimitDecel if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_LimitDecel if user_filament_current_profile == 'PETG',
                                              'defaultTempNozzle'     : user_filament_ABS_defaultTempNozzle if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_defaultTempNozzle if user_filament_current_profile == 'PETG',
                                              'defaultReadyNozzle'    : user_filament_ABS_defaultReadyNozzle if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_defaultReadyNozzle if user_filament_current_profile == 'PETG',
                                              'defaultWarmNozzle'     : user_filament_ABS_defaultWarmNozzle if user_filament_current_profile == 'ABS'
                                                                  else user_filament_PETG_defaultWarmNozzle if user_filament_current_profile == 'PETG',
                                              'defaultTempBed'        : user_filament_ABS_defaultTempBed if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_defaultTempBed if user_filament_current_profile == 'PETG',
                                              'defaultEnclosure'      : user_filament_ABS_defaultEnclosure if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_defaultEnclosure if user_filament_current_profile == 'PETG',
                                              'MeshToApply'           : user_filament_ABS_MeshToApply if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_MeshToApply if user_filament_current_profile == 'PETG',
                                              'QGLbeforeSoakMesh'     : user_filament_ABS_QGLbeforeSoakMesh if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_QGLbeforeSoakMesh if user_filament_current_profile == 'PETG',
                                              'QGLbeforeSoakPrint'    : user_filament_ABS_QGLbeforeSoakPrint if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_QGLbeforeSoakPrint if user_filament_current_profile == 'PETG',
                                              'HotmeshSoakMinutes'    : user_filament_ABS_HotmeshSoakMinutes if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_HotmeshSoakMinutes if user_filament_current_profile == 'PETG',
                                              'PrePrintSoakMinutes'   : user_filament_ABS_PrePrintSoakMinutes if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_PrePrintSoakMinutes if user_filament_current_profile == 'PETG',
                                              'InsituMeshSoakMinutes' : user_filament_ABS_InsituMeshSoakMinutes if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_InsituMeshSoakMinutes if user_filament_current_profile == 'PETG',
                                              'PostPrintCool'         : user_filament_ABS_PostPrintCool if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_PostPrintCool if user_filament_current_profile == 'PETG',
                                              'PostPrintParkCool'     : user_filament_ABS_PostPrintParkCool if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_PostPrintParkCool if user_filament_current_profile == 'PETG',
                                              'purgeRetract'          : user_filament_ABS_purgeRetract if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_purgeRetract if user_filament_current_profile == 'PETG',
                                              'EndRetract'            : user_filament_ABS_EndRetract if user_filament_current_profile == 'ABS'
                                                                   else user_filament_PETG_EndRetract if user_filament_current_profile == 'PETG',
                                             }
                        }
  %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_lenght / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg
                      }
  %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float
                           }
  %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current,
                        'acc'          : user_respond_set_acc,
                        'probe_action' : user_respond_probe_action,
                        'layer'        : user_respond_layer,
                        'debug'        : user_respond_debug
                       }
  %}
  {% set peripheral_dic =  {'filter'            : {'on_val'          : user_filter_on,
                                                   'warning'         : user_filter_use_time,
                                                   'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'               : {'on_val'          : user_vent_on,
                                                    'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight'          : {'on_val' : user_caselight_on},
                            'ADXLsoakMinutes'    : user_ADXLsoakMinutes
                            }
  %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=current_control VALUE="{current_control_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=bedfanvars VALUE="{bedfanvars_dic}"


  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=status_presets VALUE="{status_presets_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=sb_vars VALUE="{sb_vars_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True
  _general_Debug msg="_USER_VARIABLE - exiting"