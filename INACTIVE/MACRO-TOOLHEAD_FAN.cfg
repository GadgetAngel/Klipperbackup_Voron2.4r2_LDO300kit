############### Config options ##################
# resources this work is based on:
## URL: https://voronregistry.com/mods/ellis-bedfans
##      https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans/Klipper_Macros

[gcode_macro toolheadfanvars]
variable_threshold: 38	# If toolhead temp target is above this threshold, fan will be enabled. If temp is set to below this threshold, fan will be disabled.
variable_fast: 1.00		# Fan speed once toolhead temp is reached  
variable_slow: 0.9		# Fan speed while toolhead is heating
variable_thfan_flag: 0  # Flag indicating that toolheadFanFast already called when checking the chamber temperature
gcode:  

[delayed_gcode toolheadfan]
##  Get the saved variable from disk afeter a reboot
# on reboot the macro variable toolheadfanvars_flag will be read from disk, the looping macro toolheadfanloop will be off
# the looping macro Chamberthfan1 will check to see if the chamber temperature is still too high
initial_duration: 0.5
gcode:  
  {% set svv = printer.save_variables.variables %}
  #{% set thfan_flag = {svv.toolheadfanvars_flag|int} %}
  SET_GCODE_VARIABLE MACRO=toolheadfanvars VARIABLE=thfan_flag VALUE={ svv.toolheadfanvars_flag|int }
  #SAVE_VARIABLE VARIABLE=toolheadfanvars_flag VALUE=0

########## Aliases #########

[gcode_macro toolheadFanSlow]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro toolheadfanvars"].slow|float %}
    #M117 Toolheadfan=SLOW
	SET_FAN_SPEED FAN=Fan_EBB36_TH SPEED={SLOW}
	

[gcode_macro toolheadFanFast]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro toolheadfanvars"].fast|float %}
    #M117 Toolheadfan=FAST
	SET_FAN_SPEED FAN=Fan_EBB36_TH SPEED={FAST}

[gcode_macro toolheadFanOff]
gcode:
    #M117 Toolheadfan=OFF
	SET_FAN_SPEED FAN=Fan_EBB36_TH SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMP_JTM
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro toolheadfanvars"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M89104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M89140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fan to low if heater_bed or extruder temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed"  or HEATER|lower == "extruder" %}
		{% if TARGET >= THRESHOLD %}
			toolheadFanSlow
            SET_GCODE_VARIABLE MACRO=toolheadfanvars VARIABLE=thfan_flag VALUE=0
			SAVE_VARIABLE VARIABLE=toolheadfanvars_flag VALUE=0
			UPDATE_DELAYED_GCODE ID=Chamberthfan1 DURATION=0						  # If heater temp set, ensure Chamberthfan1 loop ends
			UPDATE_DELAYED_GCODE ID=toolheadfanloop DURATION=1
		{% else %}
        	toolheadFanOff
            # check to see if the toolhead fan still needs to run even if the heaters are turned off
            {% if printer["temperature_sensor N_ebb36"].temperature|int >= THRESHOLD %}
              {% set check = printer["gcode_macro toolheadfanvars"].thfan_flag|int %}
                {% if check == 0 %}
                    toolheadFanFast	
                    SET_GCODE_VARIABLE MACRO=toolheadfanvars VARIABLE=thfan_flag VALUE=1
					SAVE_VARIABLE VARIABLE=toolheadfanvars_flag VALUE=1
                {% endif %}
				UPDATE_DELAYED_GCODE ID=toolheadfanloop DURATION=0  # Cancel toolhead fan loop if it's running
                UPDATE_DELAYED_GCODE ID=Chamberthfan1 DURATION=5	# kick off Chamberthfan1 monitoring loop
			{% else %}
				UPDATE_DELAYED_GCODE ID=toolheadfanloop DURATION=0 #	Cancel toolhead fan loop if it's running
				SET_GCODE_VARIABLE MACRO=toolheadfanvars VARIABLE=thfan_flag VALUE=0
				SAVE_VARIABLE VARIABLE=toolheadfanvars_flag VALUE=0
				UPDATE_DELAYED_GCODE ID=Chamberthfan1 DURATION=0	#??			
			{% endif %}
        {% endif %}
	{% endif %}

# Override M190 (Wait for bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M89190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro toolheadfanvars"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		toolheadFanSlow																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		toolheadFanOff																# < Threshold temp: Turn toolhead fans off
	{% endif %}                                        

      M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}															# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BedFansFast																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}

# Override M109 (Wait for extruder Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M89109
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro toolheadfanvars"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		toolheadFanSlow																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		toolheadFanOff																# < Threshold temp: Turn toolhead fan off
	{% endif %}                                        

	M104 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set extruder temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for extruder temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BedFansFast																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M89140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

# Replace M104 (Set extruder Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M104]
rename_existing: M89104
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={S}
	
	
################ Monitoring loop #####################

# Turns toolhead fan to "fast" speed once target toolhead temp is reached.
[delayed_gcode toolheadfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro toolheadfanvars"].threshold|int %}

	{% if ((printer.heater_bed.target >= THRESHOLD) or (printer.extruder.target >= THRESHOLD)) %}		# Continue only if target temp greater than threshold.
		{% if ((printer.heater_bed.temperature|int) >= (printer.heater_bed.target|int - 1)) or ((printer.extruder.temperature|int) >= (printer.extruder.target|int - 1)) %}
            toolheadFanFast		                          												# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=toolheadfanloop DURATION=5						                    # If temp not reached yet: loop again
		{% endif %}
	 {% endif %}


# Turns toolhead fan to "on" or "off" based on Toolhead termperaute board
[delayed_gcode Chamberthfan1]
initial_duration: 1.
gcode:
#	# Vars
    {% set ebb36temp = printer["temperature_sensor N_ebb36"].temperature|int %}

    #{action_respond_info("ebb36 temp: %.1f" % (ebb36temp))}

	{% set THRESHOLD = printer["gcode_macro toolheadfanvars"].threshold|int %}

    {% if ebb36temp >= THRESHOLD %}		    # Continue only if chamber temp greater than threshold.
        {% set check = printer["gcode_macro toolheadfanvars"].thfan_flag|int %}
        {% if check == 0 %}
            toolheadFanFast	
            SET_GCODE_VARIABLE MACRO=toolheadfanvars VARIABLE=thfan_flag VALUE=1
			SAVE_VARIABLE VARIABLE=toolheadfanvars_flag VALUE=1
        {% endif %}
        UPDATE_DELAYED_GCODE ID=Chamberthfan1 DURATION=5
	{% else %}
       	toolheadFanOff
        SET_GCODE_VARIABLE MACRO=toolheadfanvars VARIABLE=thfan_flag VALUE=0
	    SAVE_VARIABLE VARIABLE=toolheadfanvars_flag VALUE=0
		UPDATE_DELAYED_GCODE ID=Chamberthfan1 DURATION=0						                    # If Chamber Temp less than thershold, stop
	{% endif %}
	 

#[delayed_gcode report_temp]
##  This can be canceled with the following gcode:
##       UPDATE_DELAYED_GCODE ID=report_temp DURATION=0
#initial_duration: 2.
#gcode:
#  {action_respond_info("report_temp: ebb36 temp: %.1f" % (printer["temperature_sensor N_ebb36"].temperature))}
#  UPDATE_DELAYED_GCODE ID=report_temp DURATION=2
