############### Config options ##################
## URL: https://voronregistry.com/mods/ellis-bedfans
##      https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans/Klipper_Macros
#.................................................................................................................
# This macro starts automatically when the heater_bed TARGET temperature is set
# This macro requires the following objects to be defined in the configuration of the printer object:
#    1.  a chamber temperature sensor to be defined:
#             replace all occurances of "J_Chamber_ZDragChain_PT100" with the name of your chamber temperature sensor in this file
#    2.  bed fans to be defined:
#             if you have two bed fans defined: replace all occurances of "Bedfan_Left" and "Bedfan_Right" with the names of the two bed fans you have defined
#             or
#             if you have only one bed fan defined: replace all occurances of "Bedfan_Left" with the name of the bed fan you have defined and remove "Bedfan_Right"
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
#[gcode_macro globalvariables]
#variable_defaultEnclosure: 40          # The default Enclosure temperature if none is specified
#gcode:
#.................................................................................................................
# Required external macro(s) used by this macro set.
#
# delayed_gcode boot_bedfans that run 30 milli-seconds after klipper hits ready state
#  boot_bedfans just initializes two vairablse to zero in gcode_macro bedfanvars
#  1. variable_flag: 0
#  2. variable_lasttemp: 0.0   
#.................................................................................................................

#.................................................................................................................
# Included macro commands in this bundle
#.................................................................................................................
# BedFansSlow - No additional options / Usage: BedFansSlow
#  runs the bed fans at a slow speed as specified by variable_slow in gcode_macro bedfansvars
#.................................................................................................................
# BedFansFast - No additional options / Usage: BedFansFast
#   runs the bed fans at a fast speed as specified by variable_fast in gcode_macro bedfansvars
#.................................................................................................................
# BedFansOff - No additional options / # Usage: BedFansOff
#   turns off the bed fans
#.................................................................................................................
# BedFansFastPlus_02 - No additional options / Usage: BedFansFastPlus_02
#   runs the bed fans at a fast speed as specified by chamber_fast in gcode_macro bedfansvars
#.................................................................................................................
# BedFansSlow - No additional options / Usage: BedFansSlow
#  runs the bed fans at a slow speed as specified by variable_slow in gcode_macro bedfansvars
#.................................................................................................................
#.................................................................................................................
# _SET_HEATER_TEMPERATURE - HEATER={"extruder"|"heater_bed"} TARGET={target_temperature} / Usage: _SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
#  if the HEATER is the "extruder" is passes the TARGET temperature on to M104 S{TARGET} command
#  if the HEATER is the "heater_bed" and the TARTGET temperature is equal to or greater than variable_threshold in gcode_macro bedfansvars,
#     it sets the TARTGET temperature via M99140 S{TARGET} and triggers the bedfanloop macro
#  if the HEATER is the "heater_bed" and the TARTGET temperature is less than variable_threshold in gcode_macro bedfansvars,
#     it sets the TARTGET temperature via M99140 S{TARGET} and stops the bedfans from blowing and disables the bedfanloop macro
#.................................................................................................................
#.................................................................................................................
# M190 - S{target_temperature} / Usage: M190 S110
#   Override M190 (Wait for Bed Temperature)
#.................................................................................................................
#.................................................................................................................
# M140 - S{target_temperature} / Usage: M140 S110
#  Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
#.................................................................................................................
#.................................................................................................................
# _TURN_OFF_HEATERS - No additional options / Usage:_TURN_OFF_HEATERS
#  Replace TURN_OFF_HEATERS.  It does what TURN_OFF_HEATERS does but also turns off the bed fans
#.................................................................................................................
#.................................................................................................................
# info_bedfans - No additional options / Usage: info_bedfan
#  displays the following information:
#      Heater_threshold = %d;
#      ChamberTEMP_threshold = %.2f;
#      FLAG = %d;\nLAST_CHAMBER_TEMP = %.2f;
#      current_CHAMBER_TEMP = %.2f;
#      OFFSET = %d;
#.................................................................................................................
#.................................................................................................................
# report_temp - No additional options / Usage: report_temp
#  Thisis commented out but it is an example of a delayed gcode routine that reports the temperature of the EBB36 muc every 2 seconds
#.................................................................................................................


[gcode_macro bedfanvars]
variable_threshold: 110		 # If bed temp target is equal to or above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.4 	    	 # Fan speed once bed temp is reached  
variable_slow: 0.2		     # Fan speed while bed is heating
variable_offset: 4           # Fan is off when chamber temp < (defaultenclosure-offset), if temp is falling.
variable_chamber_fast: 0.60  # fan speed to use when trying to keep chamber enclosure at defaultEnclosure temperature (set point chamber temperature)
variable_flag: 0             # Bed heater reached target temp if this value > 0, Valid value: 0 (boot state), 2 (Target heater temp reached), 3 (chamber temp falling), 4 (chamber temp above defaultEnclosure temp)
variable_lasttemp: 0.0       # previous chamber temperature reading
gcode:

########## Aliases #########

[gcode_macro BedFansSlow]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}
	SET_FAN_SPEED FAN=Bedfan_Left SPEED={SLOW}
	SET_FAN_SPEED FAN=Bedfan_Right SPEED={SLOW}
	

[gcode_macro BedFansFast]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro bedfanvars"].fast|float %}
	SET_FAN_SPEED FAN=Bedfan_Left SPEED={FAST}
	SET_FAN_SPEED FAN=Bedfan_Right SPEED={FAST}

[gcode_macro BedFansOff]
gcode:
	SET_FAN_SPEED FAN=Bedfan_Left SPEED=0
	SET_FAN_SPEED FAN=Bedfan_Right SPEED=0

[gcode_macro BedFansFastPlus_02]
gcode:
	# Vars
	{% set FAST02 = (printer["gcode_macro bedfanvars"].chamber_fast|float) %}
	SET_FAN_SPEED FAN=Bedfan_Left SPEED={FAST02}
	SET_FAN_SPEED FAN=Bedfan_Right SPEED={FAST02}

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
    {% set CURRENT_CHAMBERTEMP = printer["temperature_sensor J_Chamber_ZDragChain_PT100"].temperature|float %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BedFansSlow
            SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=lasttemp VALUE={CURRENT_CHAMBERTEMP}
            SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=flag VALUE=0
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
		{% else %}
			BedFansOff
            SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=lasttemp VALUE={CURRENT_CHAMBERTEMP}
            SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=flag VALUE=0
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BedFansSlow																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BedFansOff																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BedFansFast																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BedFansOff
	_TURN_OFF_HEATERS

[gcode_macro info_bedfans]
gcode:
    {% set chambertemp = printer["temperature_sensor J_Chamber_ZDragChain_PT100"].temperature|float %}
    {action_respond_info("++++++++++++++++++++++++") }
    {action_respond_info("Heater_threshold = %d;\nChamberTEMP_threshold = %.2f;\nFLAG = %d;\nLAST_CHAMBER_TEMP = %.2f;\ncurrent_CHAMBER_TEMP = %.2f;\nOFFSET = %d;" % (printer["gcode_macro bedfanvars"].threshold|int, printer['gcode_macro globalvariables'].defaultenclosure,  printer["gcode_macro bedfanvars"].flag|int, printer["gcode_macro bedfanvars"].lasttemp, chambertemp, printer["gcode_macro bedfanvars"].offset|int)) }
    {action_respond_info("++++++++++++++++++++++++") }
    {action_respond_info("                        ") }
    {action_respond_info("                        ") }
	
################ Monitoring loop #####################

#[delayed_gcode boot_bedfans]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<MOVED to MACRO-PRERUN.cfg
#initial_duration: 0.5
#gcode:
#    SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=flag VALUE=0
#    {% set chambertemp = printer["temperature_sensor J_Chamber_ZDragChain_PT100"].temperature|float %}
#    SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=lasttemp VALUE={0.0}
#    {action_respond_info("++++++++++++++++++++++++") }
#    {action_respond_info("Heater_threshold = %d;\nChamberTEMP_threshold = %.2f;\nFLAG = %d;\nLAST_CHAMBER_TEMP = %.2f;\ncurrent_CHAMBER_TEMP = %.2f;\nOFFSET = %d;" % (printer["gcode_macro bedfanvars"].threshold|int, printer['gcode_macro globalvariables'].defaultenclosure,  printer["gcode_macro bedfanvars"].flag|int, printer["gcode_macro bedfanvars"].lasttemp, chambertemp, printer["gcode_macro bedfanvars"].offset|int)) }
#    {action_respond_info("++++++++++++++++++++++++") }
#    {action_respond_info("                        ") }

    

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
    {% set CHAMBER_THERSHOLD = printer['gcode_macro globalvariables'].defaultenclosure %}
    {% set CURRENT_CHAMBERTEMP = printer["temperature_sensor J_Chamber_ZDragChain_PT100"].temperature %}
    {% set LAST_CHAMBERTEMP = printer["gcode_macro bedfanvars"].lasttemp %}
    {% set OFFSET = printer["gcode_macro bedfanvars"].offset|int %}
    {% set FLAG = printer["gcode_macro bedfanvars"].flag|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
            {% if FLAG == 0 %}
        			BedFansFast			# If within 1 degree of target temp: Higher speed fans
                    #{action_respond_info("++++++++++++++++++++++++") }
                    #{action_respond_info("FLAG = %d;\nLAST_CHAMBERTEMP = %.2f;\nCURRENT_CHAMBERTEMP = %.2f;" % (FLAG, LAST_CHAMBERTEMP, CURRENT_CHAMBERTEMP))}
                    #{action_respond_info("++++++++++++++++++++++++") }
                    SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=lasttemp VALUE={CURRENT_CHAMBERTEMP}
                    SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=flag VALUE=2
                    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=8
            {% elif (FLAG != 0) %}
                        ## check chamber termpearture, if too hot, raise the bed fan speed
                        ## if chmaber temperature is too low, run bed fans slower 
                        #{action_respond_info("------------------------") }
                        #{action_respond_info("LAST_CHAMBERTEMP =  %.2f; CURRENT_CHAMBERTEMP = %.2f;" % (LAST_CHAMBERTEMP, CURRENT_CHAMBERTEMP)) }
                        #{action_respond_info("------------------------") }
                        {% if CURRENT_CHAMBERTEMP < LAST_CHAMBERTEMP  %} #  Temp is falling, stop fans (let chamber heat up)
                            {% if CURRENT_CHAMBERTEMP < (CHAMBER_THERSHOLD-OFFSET) %}
                                {% if FLAG != 3 %}
                                     BedFansOff
                                     SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=flag VALUE=3
                                {% endif %}
                            {% endif %}
                        {% else %} #rising temp or same, increase fans (help chamber cool down)
                            {% if CURRENT_CHAMBERTEMP >= CHAMBER_THERSHOLD %}
                                {% if FLAG != 4 %}
                                    BedFansFastPlus_02
                                    SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=flag VALUE=4
                                {% endif %}
                            {% endif %}
                        {% endif %}
                        #{action_respond_info("++++++++++++++++++++++++") }
                        #{action_respond_info("FLAG = %d;\nLAST_CHAMBERTEMP = %.2f;\nCURRENT_CHAMBERTEMP = %.2f;" % (FLAG, LAST_CHAMBERTEMP, CURRENT_CHAMBERTEMP))}
                        #{action_respond_info("++++++++++++++++++++++++") }
                        SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=lasttemp VALUE={CURRENT_CHAMBERTEMP}
                        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=8
            {% endif %}
        {% else %}
            #{action_respond_info("++++++++++++++++++++++++") }
            #{action_respond_info("FLAG = %d;\nLAST_CHAMBERTEMP = %.2f;\nCURRENT_CHAMBERTEMP = %.2f;" % (FLAG, LAST_CHAMBERTEMP, CURRENT_CHAMBERTEMP))}
            #{action_respond_info("++++++++++++++++++++++++") }
            SET_GCODE_VARIABLE MACRO=bedfanvars VARIABLE=lasttemp VALUE={CURRENT_CHAMBERTEMP}
        	UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=8	# If temp not reached yet: loop again
		{% endif %}
    {% endif %}

#[delayed_gcode report_temp]
##  This can be canceled with the following gcode:
##       UPDATE_DELAYED_GCODE ID=report_temp DURATION=0
#initial_duration: 2.
#gcode:
#  {action_respond_info("report_temp: ebb36 temp: %.1f" % (printer["temperature_sensor J_Chamber_ZDragChain_PT100"].temperature))}
#  UPDATE_DELAYED_GCODE ID=report_temp DURATION=2
