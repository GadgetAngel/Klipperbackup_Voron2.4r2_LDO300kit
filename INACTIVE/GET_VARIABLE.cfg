#.................................................................................................................
# GET_VARIABLE - required parameters: 
#              NAME=('string or string.list.seperated.by.a.period') - search in printer[NAME] or print[NAME].listname.listname.lisanme -> Filter results based on name (or the list of names, this is an exact match)
#              JOIN=(integer, 0,1) -> Set to 0 to stop carriage returns to be added to the end of output for non-string results. Default 1 (add a return carriage to the output for non-string results)
# 
#              / Usage: 
#                     GET_VARIABLE NAME=toolhead                               ;Returns value and type of variable printer.toolhead
#                     GET_VARIABLE NAME=bed_mesh.profiles.default.points.1.0   ;Returns value and type of variable printer.bed_mesh.profiles.default.points[1][0]
#
# EXAMPLES:
# GET_VARIABLE NAME=toolhead
# GET_VARIABLE NAME=toolhead JOIN=0
# GET_VARIABLE NAME=toolhead JOIN=1
# GET_VARIABLE NAME=bed_mesh.profiles.default.points.1.0
# GET_VARIABLE NAME=bed_mesh.profiles.default.points.0.0                   ;mapping
# GET_VARIABLE NAME=toolhead.axis_maximum                                  ;iterable
# GET_VARIABLE NAME=toolhead.estimated_print_time                          ;float
# GET_VARIABLE NAME=toolhead.stalls                                        ;integer
# GET_VARIABLE NAME=toolhead.extruder                                      ;string
# GET_VARIABLE NAME=gcode_move.absolute_extrude                            :boolean
# GET_VARIABLE NAME=joann                                                  ; does not exist
# GET_VARIABLE NAME=manual_probe.z_position                                ;None
# GET_VARIABLE NAME=configfile.config.probe 
#
# This macro returns value and type of a single variable to the g-code terminal. Keys and indexes can be chained to access nested dictionaries and lists.
# created by FatalBulletHit
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
# ---NONE---
#.................................................................................................................
# Required external macro(s) used by this macro set.
#
# ---NONE---
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/get_variable.html#get-variable
#      
#.................................................................................................................
#
# SEARCH_PRINTER_OBJECTS P="toolhead"
#
[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    #{action_respond_info("names = %s;" % names|string)}    ; debug
    
    {% set _dummy0 = namespace( break = 0 ) %}
    
    {% if printer[names|first] %}
        {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
        {% for name in names if _dummy0.break == 0 %}
            #{action_respond_info("name = %s; loop.index = %d" % (name|string, loop.index))}   ; debug
            {% if loop.index > 1 %}  ;The current iteration of the loop. (1 indexed)
                {% if name in _dummy1.out %}
                    {% set _dummy1.out = _dummy1.out[name] %}
                    #{action_respond_info("_dummy1.out = %s;" % (_dummy1.out|string))}       ; debug
                {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                    {% set _dummy1.out = _dummy1.out[name|int] %}
                    #{action_respond_info("=====>_dummy1.out = %s;" % (_dummy1.out|string))}  ; debug
                {% else %}
                    {% set _dummy0.break = loop.index0 %}
                    #{action_respond_info(" RE-setting _dummy0.break  to %s" % _dummy0.break)}  ; debug
                {% endif %}
            #{% else %} ; debug
                # debug
                #{action_respond_info("loop.index = 1")} 
            {% endif %}
        {% endfor %}
    
        {% if _dummy1.out is boolean %}
            { action_respond_info('Type: boolean') }
        {% elif _dummy1.out is float %}
            { action_respond_info('Type: float') }
        {% elif _dummy1.out is integer %}
            { action_respond_info('Type: integer') }
        {% elif _dummy1.out is mapping %}
            { action_respond_info('Type: mapping') }
        {% elif _dummy1.out is string %}
            { action_respond_info('Type: string') }
        {% elif _dummy1.out is iterable %}
            { action_respond_info('Type: iterable') }
        {% elif _dummy1.out is none %}
            { action_respond_info('Type: none') }
        {% elif _dummy1.out is undefined %}
            { action_respond_info('Type: undefined') }
        {% elif _dummy1.out is callable %}
            { action_respond_info('Type: callable') }
        {% else %}
            { action_respond_info('Type: unknown') }
        {% endif %}
    
        {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
            #{action_respond_info("IF part ")}  ; debug
            { action_respond_info('%s' % _dummy1.out|join("\n")) }
        {% else %}
            #{action_respond_info("ELSE part ")}  ; debug
            {% if _dummy1.out is mapping and join %}
                {% for key in _dummy1.out|sort %}
                    {% if _dummy0.break == 0 and (not('join=' in rawparams|lower)) %}
                        { action_respond_info("printer['%s'].%s = %s" % (rawparams[5:], key, _dummy1.out[key]) ) } 
                    {% elif _dummy0.break == 0 and ('join=' in rawparams|lower) %}
                        {% set end = rawparams|length %}
                        { action_respond_info("printer['%s'].%s = %s" % (rawparams[5:(end-7)], key, _dummy1.out[key]) ) } 
                    {% endif %}                    
                {% endfor %}
            {% else %}
                { action_respond_info('%s' % _dummy1.out) }
            {% endif %}
        {% endif %}
    
        {% if _dummy0.break != 0 %}
            { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
        {% endif %}
    
    {% else %}
        { action_respond_info("printer['%s'] does not exists!" % (names[0])) }
    {% endif %}
