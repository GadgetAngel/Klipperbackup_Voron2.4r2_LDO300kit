#.................................................................................................................
# Power Devices for moonraker
#   Definitions to moonraker for Tasmoto power plugs and the Klipper device so that moonraker can control the relay to reset the RP2040 on the TinyFAN PCB
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
## ---NONE---
#.................................................................................................................
# Required external macro(s) used by this macro.
#
## ---NONE---
#.................................................................................................................

#.................................................................................................................
#
## URL Resources: 
#  URL: https://moonraker.readthedocs.io/en/latest/configuration/#power
#  URL: https://tasmota.github.io/docs/devices/Sonoff-S31/
##      
#.................................................................................................................

[power tasmota_plug_RGB]
#
# Sonoff 31:
#  WLED1_15Amp_PSU (sonoff_7)
#  http://WLED1-15Amp-PSU.local              cmnd/WLED1_15Amp_PSU/
#
type: mqtt
#   The type of device.  Can be either gpio, klipper_device, rf,
#   tplink_smartplug, tasmota, shelly, homeseer, homeassistant, loxonev1,
#   smartthings, mqtt or hue.
#   This parameter must be provided.
#qos:
#  The MQTT QOS level to use when publishing and subscribing to topics.
#  The default is to use the setting supplied in the [mqtt] section.
command_topic:  cmnd/WLED1_15Amp_PSU/POWER
#  The mqtt topic used to publish commands to the device.  This parameter must
#  be provided.
command_payload:  {command}
#  The payload sent with the topic.  This can be a template, with a "command"
#  variable included in the template context, where "command" is either "on"
#  or "off".  For example:
#    {% if command == "on" %}
#      TURN_ON
#    {% else %}
#      TURN_OFF
#    {% endif %}
#  The above example would resolve to "TURN_ON" if the request is turn the
#  the device on, and "TURN_OFF" if the request is to turn the device off.
#  This parameter must be provided.
retain_command_state: False
#  If set to True the retain flag will be set when the command topic is
#  published.  Default is False.
state_topic:  stat/WLED1_15Amp_PSU/RESULT 
#  The mqtt topic to subscribe to for state updates.  This parameter must be
#  provided.
state_response_template:     
   {% set resp = payload|fromjson %}
      {resp["POWER"]}
#
#  A template used to parse the payload received with the state topic.  A
#  "payload" variable is provided the template's context.  This template
#  must resolve to "on" or "off".  For example:
#    {% set resp = payload|fromjson %}
#    {resp["POWER"]}
#  The above example assumes a json response is received, with a "POWER" field
#  that set to either "ON" or "OFF".  The resolved response will always be
#  trimmed of whitespace and converted to lowercase. The default is the payload.
state_timeout: 3
#  The amount of time (in seconds) to wait for the state topic to receive an
#  update. If the timeout expires the device revert to an "error" state.  This
#  timeout is applied during initialization and after a command has been sent.
#  The default is 2 seconds.
query_topic:  stat/WLED1_15Amp_PSU/POWER
#  The topic used to query command state.  It is expected that the device will
#  respond by publishing to the "state_topic".  This parameter is optional,
query_payload: {payload}
#  The payload to send with the query topic.  This may be a template or a string.
#  The default is no payload.
query_after_command:  False
#  If set to True Moonraker will publish the query topic after publishing the
#  command topic.  This should only be necessary if the device does not publish a
#  response to a command request to the state topic.  The default is False.
off_when_shutdown: False
#   If set to True the device will be powered off when Klipper enters
#   the "shutdown" state.  This option applies to all device types.
#   The default is False.
#off_when_shutdown_delay: 0
#   If "off_when_shutdown" is set, this option specifies the amount of time
#   (in seconds) to wait before turning the device off. Default is 0 seconds.
on_when_job_queued: False
#   If set to True the device will power on if a job is queued while the
#   device is off.  This allows for an automated "upload, power on, and
#   print" approach directly from the slicer, see the configuration example
#   below for details. The default is False.
locked_while_printing: False
#   If True, locks the device so that the power cannot be changed while the
#   printer is printing. This is useful to avert an accidental shutdown to
#   the printer's power.  The default is False.
restart_klipper_when_powered: False
#   If set to True, Moonraker will schedule a "FIRMWARE_RESTART" to command
#   after the device has been powered on. If it isn't possible to immediately
#   schedule a firmware restart (ie: Klippy is disconnected), the restart
#   will be postponed until Klippy reconnects and reports that startup is
#   complete.  Prior to scheduling the restart command the power device will
#   always check Klippy's state.  If Klippy reports that it is "ready", the
#   FIRMWARE_RESTART will be aborted as unnecessary.
#   The default is False.
#restart_delay: 1.
#   If "restart_klipper_when_powered" is set, this option specifies the amount
#   of time (in seconds) to delay the restart.  Default is 1 second.
#bound_service:
#   Can be set to any service Moonraker is authorized to manage with the
#   exception of the moonraker service itself. See the tip below this section
#   for details on what services are authorized.  When a bound service has
#   been set the service will be started when the device powers on and stopped
#   when the device powers off.  The default is no service is bound to the
#   device.

[power tasmota_plug_RGB2]
# 
# Sonoff 31:
#  WLED2_10Amp_PSU (sonoff_8)
#  http://WLED2_10Amp_PSU.local              cmnd/WLED2_10Amp_PSU/
#
type: mqtt
command_topic:  cmnd/WLED2_10Amp_PSU/POWER
command_payload:  {command}
retain_command_state: False
state_topic:  stat/WLED2_10Amp_PSU/RESULT 
state_response_template:     
   {% set resp = payload|fromjson %}
      {resp["POWER"]}
state_timeout: 3
query_topic:  stat/WLED2_10Amp_PSU/POWER
query_payload: {payload}
query_after_command:  False
off_when_shutdown: False
#off_when_shutdown_delay: 0
on_when_job_queued: False
locked_while_printing: False
restart_klipper_when_powered: False
#restart_delay: 1.
#bound_service:

[power tasmota_plug_ESP]
# 
# Sonoff 31:
#  ESP1_PSU (sonoff_3)
#  http://ESP1-PSU.local                     cmnd/ESP1_PSU/
#
type: mqtt
command_topic:  cmnd/ESP1_PSU/POWER
command_payload:  {command}
retain_command_state: False
state_topic:  stat/ESP1_PSU/RESULT 
state_response_template:     
   {% set resp = payload|fromjson %}
      {resp["POWER"]}
state_timeout: 3
query_topic:  stat/ESP1_PSU/POWER
query_payload: {payload}
query_after_command:  False
off_when_shutdown: False
#off_when_shutdown_delay: 0
on_when_job_queued: False
locked_while_printing: False
restart_klipper_when_powered: False
#restart_delay: 1.
#bound_service:

[power tasmota_plug_ESP2]
# 
# Sonoff 31:
#  ESP2_PSU (sonoff_4)
#  http://esp2-psu.local                     cmnd/ESP2_PSU/
#
type: mqtt
command_topic:  cmnd/ESP2_PSU/POWER
command_payload:  {command}
retain_command_state: False
state_topic:  stat/ESP2_PSU/RESULT 
state_response_template:     
   {% set resp = payload|fromjson %}
      {resp["POWER"]}
state_timeout: 3
query_topic:  stat/ESP2_PSU/POWER
query_payload: {payload}
query_after_command:  False
off_when_shutdown: False
#off_when_shutdown_delay: 0
on_when_job_queued: False
locked_while_printing: False
restart_klipper_when_powered: False
#restart_delay: 1.
#bound_service:

[power tasmota_plug_IR]
# 
# Sonoff 31:
#  IR_PSU (sonoff_5)
#  http://ir-psu.local                       cmnd/IR_PSU/
#
type: mqtt
command_topic:  cmnd/IR_PSU/POWER
command_payload:  {command}
retain_command_state: False
state_topic:  stat/IR_PSU/RESULT 
state_response_template:     
   {% set resp = payload|fromjson %}
      {resp["POWER"]}
state_timeout: 3
query_topic:  stat/IR_PSU/POWER
query_payload: {payload}
query_after_command:  False
off_when_shutdown: False
#off_when_shutdown_delay: 0
on_when_job_queued: False
locked_while_printing: False
restart_klipper_when_powered: False
#restart_delay: 1.
#bound_service:

[power tasmota_plug_Pi]
# 
# Sonoff 31:
#  Raspberry Pi PSU (sonoff_9)
#  http://raspberry-pi.local                 cmnd/Raspberry_Pi/
#
type: mqtt
command_topic:  cmnd/Raspberry_Pi/POWER
command_payload:  {command}
retain_command_state: False
state_topic:  stat/Raspberry_Pi/RESULT 
state_response_template:     
   {% set resp = payload|fromjson %}
      {resp["POWER"]}
state_timeout: 3
query_topic:  stat/Raspberry_Pi/POWER
query_payload: {payload}
query_after_command:  False
off_when_shutdown: True
off_when_shutdown_delay: 30
on_when_job_queued: False
locked_while_printing: False
restart_klipper_when_powered: True
restart_delay: 5
bound_service: klipper


[power rp2040]
#
# Defne a Klipper device so that moonraker can control the relay to reset the RP2040 on the TinyFAN PCB 
# See URL: https://moonraker.readthedocs.io/en/latest/configuration/#klipper-device-configuration
#
# The TinyFAN PCB uses a RP2040-zero as the MCU.  This MCU looses USB communications
# after the Raspberry Pi Reboots or Shutsdown.  To regain access to the USB coms
# the RP2040 has to be forced to go through the USB enumeration process and this can
# only be done via a RESET of the MCU by momentarily removing the 5V line on the USB connector
# (unplugging the USB cable) or by physically hit the "RESET" button on the RP2040 module.
# my hope is that by using a Relay to momentarily remove 5V on the USB connector I will
# RESET the USB communications with Klipper
type: klipper_device
object_name: output_pin reset_line_RP2040
#    The Klipper object_name (as defined in your Klipper config).  Valid examples:
#      output_pin my_pin
#      gcode_macro MY_MACRO
#    Currently, only `output_pin` and `gcode_macro` Klipper devices are
#    supported.  See the note below for macro restrictions. Keep in mind that
#    the object name is case sensitive.  This parameter must be provided.
timer: 0.5
#    A time (in seconds) after which the device will power off after being.
#    switched on. This effectively turns the device into a  momentary switch.
#    This option is available for gpio, klipper_device, tplink_smartplug,
#    shelly, and tasmota devices.  The timer may be a floating point value
#    for gpio types, it should be an integer for all other types.  The
#    default is no timer is set.
